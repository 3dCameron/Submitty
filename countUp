site/app/controllers/AbstractController.php:            return $gradeable->getComponent($component_id);
site/app/controllers/AbstractController.php:            $version_instance = $auto_graded_gradeable->getAutoGradedVersions()[$version] ?? null;
site/app/controllers/AbstractController.php:            $version_instance = $auto_graded_gradeable->getActiveVersionInstance();
site/app/controllers/AuthenticationController.php:        if ($gradeable !== null && $gradeable->isTeamAssignment()) {
site/app/controllers/MiscController.php:        $active_version = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/controllers/MiscController.php:        $gradeable_version = $graded_gradeable->getAutoGradedGradeable()->getAutoGradedVersionInstance($version);
site/app/controllers/MiscController.php:        $active_version = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/controllers/MiscController.php:            $paths[] = FileUtils::joinPaths($gradeable_path, $folder_name, $gradeable->getId(), $graded_gradeable->getSubmitter()->getId(), $version);
site/app/controllers/MiscController.php:        if ($gradeable->isVcs()) {
site/app/controllers/MiscController.php:                $gradeable->getId());
site/app/controllers/MiscController.php:                if ($gradeable->isGradeByRegistration()) {
site/app/controllers/MiscController.php:                    $sections = $this->core->getQueries()->getRotatingSectionsForGradeableAndUser($gradeable->getId(),
site/app/controllers/NavigationController.php:                $submit_everyone[$gradeable->getId()] =
site/app/controllers/NavigationController.php:        if (!$user->accessAdmin() && $gradeable->getType() == GradeableType::ELECTRONIC_FILE &&
site/app/controllers/NavigationController.php:            !$gradeable->hasAutogradingConfig()) {
site/app/controllers/NavigationController.php:        if ($gradeable->getType() !== GradeableType::ELECTRONIC_FILE && !$user->accessGrading()) {
site/app/controllers/NavigationController.php:        if (!$gradeable->isStudentView() && !$user->accessGrading()) {
site/app/controllers/NavigationController.php:        if ($gradeable->isStudentView() && $gradeable->isStudentViewAfterGrades() && !$user->accessGrading()) {
site/app/controllers/NavigationController.php:            return $gradeable->isTaGradeReleased();
site/app/controllers/NavigationController.php:        if ($gradeable->getTaViewStartDate() > $date && !$user->accessAdmin()) {
site/app/controllers/admin/AdminGradeableController.php:        $gradeable_components_enc = array_map(function(Component $c) {return $c->toArray(); }, $gradeable->getComponents());
site/app/controllers/admin/AdminGradeableController.php:        foreach ($this->core->getQueries()->getGradeablesRotatingGraderHistory($gradeable->getId()) as $row) {
site/app/controllers/admin/AdminGradeableController.php:        if ($gradeable->getGraderAssignmentMethod() == Gradeable::REGISTRATION_SECTION) {
site/app/controllers/admin/AdminGradeableController.php:            $current_g_id_key = array_search($gradeable->getId(),$rotating_gradeables);
site/app/controllers/admin/AdminGradeableController.php:        $saved_config_path = $gradeable->getAutogradingConfigPath();
site/app/controllers/admin/AdminGradeableController.php:        if($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/controllers/admin/AdminGradeableController.php:            if($gradeable->isScannedExam()) {
site/app/controllers/admin/AdminGradeableController.php:            } else if($gradeable->isVcs()) {
site/app/controllers/admin/AdminGradeableController.php:        } else if($gradeable->getType() === GradeableType::NUMERIC_TEXT) {
site/app/controllers/admin/AdminGradeableController.php:        } else if($gradeable->getType() === GradeableType::CHECKPOINTS) {
site/app/controllers/admin/AdminGradeableController.php:        if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/controllers/admin/AdminGradeableController.php:        $this->core->getOutput()->addInternalJs('admin-gradeable-updates.js');
site/app/controllers/admin/AdminGradeableController.php:            'regrade_allowed' => $gradeable->isRegradeAllowed(),
site/app/controllers/admin/AdminGradeableController.php:            'is_pdf_page' => $gradeable->isPdfUpload(),
site/app/controllers/admin/AdminGradeableController.php:            'is_pdf_page_student' => $gradeable->isStudentPdfUpload(),
site/app/controllers/admin/AdminGradeableController.php:            'num_numeric' => $gradeable->getNumNumeric(),
site/app/controllers/admin/AdminGradeableController.php:            'num_text' => $gradeable->getNumText(),
site/app/controllers/admin/AdminGradeableController.php:            'show_edit_warning' => $gradeable->anyManualGrades(),
site/app/controllers/admin/AdminGradeableController.php:            'currently_valid_repository' => $this->checkPathToConfigFile($gradeable->getAutogradingConfigPath()),
site/app/controllers/admin/AdminGradeableController.php:            'rebuild_url' => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'rebuild']),
site/app/controllers/admin/AdminGradeableController.php:        if ($gradeable->isPeerGrading()) {
site/app/controllers/admin/AdminGradeableController.php:            $old_peer_grading_assignments = $this->core->getQueries()->getPeerGradingAssignNumber($gradeable->getId());
site/app/controllers/admin/AdminGradeableController.php:            $make_peer_assignments = ($old_peer_grading_assignments !== $gradeable->getPeerGradeSet());
site/app/controllers/admin/AdminGradeableController.php:                $this->core->getQueries()->clearPeerGradingAssignments($gradeable->getId());
site/app/controllers/admin/AdminGradeableController.php:                $peer_grade_set = $gradeable->getPeerGradeSet();
site/app/controllers/admin/AdminGradeableController.php:                        $this->core->getQueries()->insertPeerGradingAssignment($grader, $student, $gradeable->getId());
site/app/controllers/admin/AdminGradeableController.php:        if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/controllers/admin/AdminGradeableController.php:        } else if ($gradeable->getType() === GradeableType::CHECKPOINTS) {
site/app/controllers/admin/AdminGradeableController.php:        } else if ($gradeable->getType() === GradeableType::NUMERIC_TEXT) {
site/app/controllers/admin/AdminGradeableController.php:        $gradeable->setComponents([$component]);
site/app/controllers/admin/AdminGradeableController.php:        $old_components = $gradeable->getComponents();
site/app/controllers/admin/AdminGradeableController.php:        if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/controllers/admin/AdminGradeableController.php:        } else if ($gradeable->getType() === GradeableType::CHECKPOINTS) {
site/app/controllers/admin/AdminGradeableController.php:        } else if ($gradeable->getType() === GradeableType::NUMERIC_TEXT) {
site/app/controllers/admin/AdminGradeableController.php:        $gradeable->setComponents($new_components);
site/app/controllers/admin/AdminGradeableController.php:        $gradeable->setRotatingGraderSections($new_graders);
site/app/controllers/admin/AdminGradeableController.php:            $template_data = $template_gradeable->toArray();
site/app/controllers/admin/AdminGradeableController.php:        if ($gradeable->isScannedExam()) {
site/app/controllers/admin/AdminGradeableController.php:            $gradeable->setStudentView(true);
site/app/controllers/admin/AdminGradeableController.php:            $gradeable->setStudentViewAfterGrades(true);
site/app/controllers/admin/AdminGradeableController.php:            $gradeable->setStudentSubmit(false);
site/app/controllers/admin/AdminGradeableController.php:            $gradeable->setAutogradingConfigPath('/usr/local/submitty/more_autograding_examples/pdf_exam/config');
site/app/controllers/admin/AdminGradeableController.php:            $gradeable->setHasDueDate(false);
site/app/controllers/admin/AdminGradeableController.php:        $dates = $gradeable->getDates();
site/app/controllers/admin/AdminGradeableController.php:                $gradeable->$setter_name($post_val);
site/app/controllers/admin/AdminGradeableController.php:                $gradeable->setDates($dates);
site/app/controllers/admin/AdminGradeableController.php:                $updated_properties = $gradeable->getDateStrings(false);
site/app/controllers/admin/AdminGradeableController.php:        if ($gradeable->getType() !== GradeableType::ELECTRONIC_FILE)
site/app/controllers/admin/AdminGradeableController.php:            'gradeable_id' => $gradeable->getId(),
site/app/controllers/admin/AdminGradeableController.php:            'config_path' => $gradeable->getAutogradingConfigPath(),
site/app/controllers/admin/AdminGradeableController.php:            'date_due' => DateUtils::dateTimeToString($gradeable->getSubmissionDueDate()),
site/app/controllers/admin/AdminGradeableController.php:            'upload_type' => $gradeable->isVcs() ? "repository" : "upload file",
site/app/controllers/admin/AdminGradeableController.php:            'subdirectory' => $gradeable->getVcsSubdirectory(),
site/app/controllers/admin/AdminGradeableController.php:        $fp = $this->core->getConfig()->getCoursePath() . '/config/form/form_' . $gradeable->getId() . '.json';
site/app/controllers/admin/AdminGradeableController.php:        return $this->writeFormConfig($gradeable) ?? $this->enqueueBuildFile($gradeable->getId());
site/app/controllers/admin/AdminGradeableController.php:            $status = $gradeable->hasAutogradingConfig();
site/app/controllers/admin/AdminGradeableController.php:        $dates = $gradeable->getDates();
site/app/controllers/admin/AdminGradeableController.php:        $gradeable->setDates($dates);
site/app/controllers/admin/AdminGradeableController.php:            $arrs = $gradeable->exportComponents();
site/app/controllers/admin/AdminGradeableController.php:            $this->core->getOutput()->renderFile(json_encode($arrs, JSON_PRETTY_PRINT), $gradeable->getId() . '_components.json');
site/app/controllers/admin/AdminGradeableController.php:                    $gradeable->importComponent($comp_arr);
site/app/controllers/admin/AutogradingConfigController.php:                if($gradeable->getAutogradingConfigPath() === $path){
site/app/controllers/admin/AutogradingConfigController.php:            if($gradeable->getAutogradingConfigPath() === $config_path){
site/app/controllers/admin/AutogradingConfigController.php:                if ($gradeable->getAutogradingConfigPath() === $config_path) {
site/app/controllers/admin/AutogradingConfigController.php:                    $inuse_config[] = $gradeable->getId();
site/app/controllers/admin/PlagiarismController.php:        $active_version_user_1 =  (string)$graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/controllers/grading/ElectronicGraderController.php:        $version_instance = $this->tryGetVersion($graded_gradeable->getAutoGradedGradeable(), $version);
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/grading/ElectronicGraderController.php:            $graded_component = $ta_graded_gradeable->getOrCreateGradedComponent($component, $grader, false);
site/app/controllers/grading/ElectronicGraderController.php:                foreach ($gradeable->getComponents() as $comp) {
site/app/controllers/grading/ElectronicGraderController.php:                    $graded_component = $ta_graded_gradeable->getGradedComponent($comp);
site/app/controllers/grading/ElectronicGraderController.php:            $this->core->addErrorMessage("You do not have permission to grade {$gradeable->getTitle()}");
site/app/controllers/grading/ElectronicGraderController.php:        $gradeableUrl = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'status']);
site/app/controllers/grading/ElectronicGraderController.php:        $this->core->getOutput()->addBreadcrumb("{$gradeable->getTitle()} Grading", $gradeableUrl);
site/app/controllers/grading/ElectronicGraderController.php:        if ($gradeable->isPeerGrading() && ($this->core->getUser()->getGroup() == User::GROUP_STUDENT)) {
site/app/controllers/grading/ElectronicGraderController.php:        $regrade_requests = $this->core->getQueries()->getNumberGradeInquiries($gradeable_id, $gradeable->isGradeInquiryPerComponentAllowed());
site/app/controllers/grading/ElectronicGraderController.php:            $peer_grade_set = $gradeable->getPeerGradeSet();
site/app/controllers/grading/ElectronicGraderController.php:            $num_components = count($gradeable->getPeerComponents());
site/app/controllers/grading/ElectronicGraderController.php:        else if ($gradeable->isGradeByRegistration()) {
site/app/controllers/grading/ElectronicGraderController.php:            $num_components = count($gradeable->getNonPeerComponents());
site/app/controllers/grading/ElectronicGraderController.php:        if($gradeable->isTeamAssignment()){
site/app/controllers/grading/ElectronicGraderController.php:            if ($gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:            $graded_components = $this->core->getQueries()->getGradedComponentsCountByGradingSections($gradeable_id, $sections, $section_key, $gradeable->isTeamAssignment());
site/app/controllers/grading/ElectronicGraderController.php:            $component_averages = $this->core->getQueries()->getAverageComponentScores($gradeable_id, $section_key, $gradeable->isTeamAssignment());
site/app/controllers/grading/ElectronicGraderController.php:            $autograded_average = $this->core->getQueries()->getAverageAutogradedScores($gradeable_id, $section_key, $gradeable->isTeamAssignment());
site/app/controllers/grading/ElectronicGraderController.php:            $overall_average = $this->core->getQueries()->getAverageForGradeable($gradeable_id, $section_key, $gradeable->isTeamAssignment());
site/app/controllers/grading/ElectronicGraderController.php:            $num_components = count($gradeable->getNonPeerComponents());
site/app/controllers/grading/ElectronicGraderController.php:                    if ($gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:        if (isset($order) && $gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:                $team_section = $gradeable->isGradeByRegistration() ? $team->getRegistrationSection() : $team->getRotatingSection();
site/app/controllers/grading/ElectronicGraderController.php:                    if ($this->core->getQueries()->getActiveVersionForTeam($gradeable->getId(),$team->getId()) != 0) {
site/app/controllers/grading/ElectronicGraderController.php:        $gradeableUrl = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'status']);
site/app/controllers/grading/ElectronicGraderController.php:        $this->core->getOutput()->addBreadcrumb("{$gradeable->getTitle()} Grading", $gradeableUrl);
site/app/controllers/grading/ElectronicGraderController.php:        $peer = ($gradeable->isPeerGrading() && $this->core->getUser()->getGroup() == User::GROUP_STUDENT);
site/app/controllers/grading/ElectronicGraderController.php:            $this->core->addErrorMessage("You do not have permission to grade {$gradeable->getTitle()}");
site/app/controllers/grading/ElectronicGraderController.php:        if ($gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:                $team_section = $gradeable->isGradeByRegistration() ? $team->getRegistrationSection() : $team->getRotatingSection();
site/app/controllers/grading/ElectronicGraderController.php:            if($gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:        if ($gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:                if ($gradeable->isGradeByRegistration()) {
site/app/controllers/grading/ElectronicGraderController.php:        $show_edit_teams = $this->core->getAccess()->canI("grading.electronic.show_edit_teams") && $gradeable->isTeamAssignment();
site/app/controllers/grading/ElectronicGraderController.php:        $past_grade_start_date = $gradeable->getDates()['grade_start_date'] < $this->core->getDateTimeNow();
site/app/controllers/grading/ElectronicGraderController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/grading/ElectronicGraderController.php:                $gradeable->createTeam($leader, $members);
site/app/controllers/grading/ElectronicGraderController.php:        $all_teams = $gradeable->getTeams();
site/app/controllers/grading/ElectronicGraderController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/grading/ElectronicGraderController.php:                $gradeable->createTeam($leader, $users, $reg_section, $rot_section);
site/app/controllers/grading/ElectronicGraderController.php:            $from_id = $from_graded_gradeable->getSubmitter();
site/app/controllers/grading/ElectronicGraderController.php:        if($gradeable->isPeerGrading() && $this->core->getUser()->getGroup() == User::GROUP_STUDENT) {
site/app/controllers/grading/ElectronicGraderController.php:        $gradeableUrl = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'status']);
site/app/controllers/grading/ElectronicGraderController.php:        $this->core->getOutput()->addBreadcrumb("{$gradeable->getTitle()} Grading", $gradeableUrl);
site/app/controllers/grading/ElectronicGraderController.php:        $team = $gradeable->isTeamAssignment();
site/app/controllers/grading/ElectronicGraderController.php:            $total = $gradeable->getPeerGradeSet();
site/app/controllers/grading/ElectronicGraderController.php:            $graded = $this->core->getQueries()->getNumGradedPeerComponents($gradeable->getId(), $this->core->getUser()->getId()) / count($gradeable->getPeerComponents());
site/app/controllers/grading/ElectronicGraderController.php:        else if ($gradeable->isGradeByRegistration()) {
site/app/controllers/grading/ElectronicGraderController.php:                $total_submitted=array_sum($this->core->getQueries()->getTotalSubmittedUserCountByGradingSections($gradeable->getId(), $sections, 'rotating_section'));
site/app/controllers/grading/ElectronicGraderController.php:            $total_submitted = $total_submitted * count($gradeable->getComponents());
site/app/controllers/grading/ElectronicGraderController.php:            $total_submitted = $total_submitted * count($gradeable->getComponents());
site/app/controllers/grading/ElectronicGraderController.php:            $this->core->redirect($this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'status']));
site/app/controllers/grading/ElectronicGraderController.php:        foreach ($gradeable->getComponents() as $component) {
site/app/controllers/grading/ElectronicGraderController.php:            $graded_component = $graded_gradeable->getOrCreateTaGradedGradeable()->getGradedComponent($component, $this->core->getUser());
site/app/controllers/grading/ElectronicGraderController.php:            $display_version = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/controllers/grading/ElectronicGraderController.php:        if ($gradeable->isTeamAssignment()) {
site/app/controllers/grading/ElectronicGraderController.php:            $late_days_user = $this->core->getQueries()->getUserById($graded_gradeable->getSubmitter()->getTeam()->getLeaderId());
site/app/controllers/grading/ElectronicGraderController.php:            $late_days_user = $graded_gradeable->getSubmitter()->getUser();
site/app/controllers/grading/ElectronicGraderController.php:            'id' => $gradeable->getId(),
site/app/controllers/grading/ElectronicGraderController.php:            'precision' => $gradeable->getPrecision()
site/app/controllers/grading/ElectronicGraderController.php:        }, array_filter($gradeable->getComponents(), function (Component $component) use ($grader, $gradeable) {
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/grading/ElectronicGraderController.php:        $response_data = $ta_graded_gradeable->toArray($grader);
site/app/controllers/grading/ElectronicGraderController.php:        $graded_gradeable = $ta_graded_gradeable->getGradedGradeable();
site/app/controllers/grading/ElectronicGraderController.php:        $gradeable = $graded_gradeable->getGradeable();
site/app/controllers/grading/ElectronicGraderController.php:        if ($gradeable->getAutogradingConfig()->anyPoints()) {
site/app/controllers/grading/ElectronicGraderController.php:            $response_data['auto_grading_total'] = $gradeable->getAutogradingConfig()->getTotalNonExtraCredit();
site/app/controllers/grading/ElectronicGraderController.php:            if ($graded_gradeable->getAutoGradedGradeable()->hasActiveVersion()) {
site/app/controllers/grading/ElectronicGraderController.php:                $response_data['auto_grading_earned'] = $graded_gradeable->getAutoGradedGradeable()->getActiveVersionInstance()->getTotalPoints();
site/app/controllers/grading/ElectronicGraderController.php:        $response_data['ta_grading_total'] = $gradeable->getTaPoints();
site/app/controllers/grading/ElectronicGraderController.php:        if ($ta_graded_gradeable->getPercentGraded() !== 0.0) {
site/app/controllers/grading/ElectronicGraderController.php:            $response_data['ta_grading_earned'] = $ta_graded_gradeable->getTotalScore();
site/app/controllers/grading/ElectronicGraderController.php:        $response_data['anon_id'] = $graded_gradeable->getSubmitter()->getAnonId();
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/grading/ElectronicGraderController.php:        $graded_component = $ta_graded_gradeable->getOrCreateGradedComponent($component, $grader, true);
site/app/controllers/grading/ElectronicGraderController.php:            $ta_graded_gradeable->deleteGradedComponent($graded_component->getComponent(), $graded_component->getGrader());
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable->resetUserViewedDate();
site/app/controllers/grading/ElectronicGraderController.php:        $submitter = $ta_graded_gradeable->getGradedGradeable()->getSubmitter();
site/app/controllers/grading/ElectronicGraderController.php:        foreach ($gradeable->getComponents() as $component) {
site/app/controllers/grading/ElectronicGraderController.php:        foreach ($gradeable->getComponents() as $component) {
site/app/controllers/grading/ElectronicGraderController.php:        foreach ($gradeable->getComponents() as $component) {
site/app/controllers/grading/ElectronicGraderController.php:            $page = $gradeable->isPdfUpload() ? ($gradeable->isStudentPdfUpload() ? Component::PDF_PAGE_STUDENT : 1) : Component::PDF_PAGE_NONE;
site/app/controllers/grading/ElectronicGraderController.php:            $component = $gradeable->addComponent('Problem ' . strval(count($gradeable->getComponents()) + 1), '', '', 0, 0,
site/app/controllers/grading/ElectronicGraderController.php:            if($gradeable->)
site/app/controllers/grading/ElectronicGraderController.php:            $gradeable->deleteComponent($component);
site/app/controllers/grading/ElectronicGraderController.php:        $version_instance = $this->tryGetVersion($graded_gradeable->getAutoGradedGradeable(), $version);
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable->setOverallComment($comment);
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable->resetUserViewedDate();
site/app/controllers/grading/ElectronicGraderController.php:        $submitter = $ta_graded_gradeable->getGradedGradeable()->getSubmitter();
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/grading/ElectronicGraderController.php:        $graded_component = $ta_graded_gradeable->getGradedComponent($component, $grader);
site/app/controllers/grading/ElectronicGraderController.php:        $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/grading/ElectronicGraderController.php:        $this->core->getOutput()->renderJsonSuccess($ta_graded_gradeable->getOverallComment());
site/app/controllers/grading/ElectronicGraderController.php:        $num_components = $this->core->getQueries()->getTotalComponentCount($gradeable->getId());
site/app/controllers/grading/ElectronicGraderController.php:        } else if ($gradeable->isGradeByRegistration()) {
site/app/controllers/grading/ElectronicGraderController.php:            $sections = $this->core->getQueries()->getRotatingSectionsForGradeableAndUser($gradeable->getId(), $grader->getId());
site/app/controllers/grading/ElectronicGraderController.php:        $section_key = ($gradeable->isGradeByRegistration() ? 'registration_section' : 'rotating_section');
site/app/controllers/grading/ElectronicGraderController.php:            $total_users = ($gradeable->isTeamAssignment()) ?
site/app/controllers/grading/ElectronicGraderController.php:                $this->core->getQueries()->getTotalTeamCountByGradingSections($gradeable->getId(), $sections, $section_key) :
site/app/controllers/grading/ElectronicGraderController.php:            $graded_components = $this->core->getQueries()->getGradedComponentsCountByGradingSections($gradeable->getId(), $sections, $section_key, $gradeable->isTeamAssignment());
site/app/controllers/grading/SimpleGraderController.php:            $this->core->addErrorMessage("You do not have permission to grade {$gradeable->getTitle()}");
site/app/controllers/grading/SimpleGraderController.php:        if ($gradeable->isGradeByRegistration()) {
site/app/controllers/grading/SimpleGraderController.php:            $grading_count = count($this->core->getQueries()->getRotatingSectionsForGradeableAndUser($gradeable->getId(), $this->core->getUser()->getId()));
site/app/controllers/grading/SimpleGraderController.php:            $sections = $gradeable->getAllGradingSections();
site/app/controllers/grading/SimpleGraderController.php:            $sections = $gradeable->getGradingSectionsForUser($this->core->getUser());
site/app/controllers/grading/SimpleGraderController.php:        if ($gradeable->isGradeByRegistration()) {
site/app/controllers/grading/SimpleGraderController.php:        $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/grading/SimpleGraderController.php:        foreach ($gradeable->getComponents() as $component) {
site/app/controllers/grading/SimpleGraderController.php:                $component_grade = $ta_graded_gradeable->getOrCreateGradedComponent($component, $grader, true);
site/app/controllers/grading/SimpleGraderController.php:        $ta_graded_gradeable->setOverallComment('');
site/app/controllers/grading/SimpleGraderController.php:                JsonResponse::getFailResponse("You do not have permission to grade {$gradeable->getTitle()}")
site/app/controllers/grading/SimpleGraderController.php:                $username = $graded_gradeable->getSubmitter()->getId();
site/app/controllers/grading/SimpleGraderController.php:                $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/grading/SimpleGraderController.php:                foreach ($gradeable->getComponents() as $component) {
site/app/controllers/grading/SimpleGraderController.php:                    $component_grade = $ta_graded_gradeable->getOrCreateGradedComponent($component, $grader, true);
site/app/controllers/grading/SimpleGraderController.php:                $ta_graded_gradeable->setOverallComment('');
site/app/controllers/pdf/PDFController.php:        if($gradeable->isTeamAssignment()){
site/app/controllers/pdf/PDFController.php:        $active_version = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/controllers/pdf/PDFController.php:        $active_version = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/controllers/pdf/PDFController.php:        if($gradeable->isTeamAssignment()){
site/app/controllers/pdf/PDFController.php:        $active_version = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/controllers/student/GradeInquiryController.php:        if(!$gradeable->isRegradeOpen()) {
site/app/controllers/student/GradeInquiryController.php:        if (!$graded_gradeable->getSubmitter()->hasUser($user) && !$can_inquiry) {
site/app/controllers/student/GradeInquiryController.php:        if (!$graded_gradeable->hasRegradeRequest()) {
site/app/controllers/student/GradeInquiryController.php:        if (!$graded_gradeable->getSubmitter()->hasUser($user) && !$can_inquiry) {
site/app/controllers/student/GradeInquiryController.php:        $grade_inquiry = $graded_gradeable->getGradeInquiryByGcId($gc_id);
site/app/controllers/student/GradeInquiryController.php:        if (!$graded_gradeable->hasRegradeRequest()) {
site/app/controllers/student/GradeInquiryController.php:        if (!$graded_gradeable->getSubmitter()->hasUser($user) && !$can_inquiry) {
site/app/controllers/student/GradeInquiryController.php:        $grade_inquiry = $graded_gradeable->getGradeInquiryByGcId($gc_id);
site/app/controllers/student/GradeInquiryController.php:        if ($graded_gradeable->hasTaGradingInfo()) {
site/app/controllers/student/GradeInquiryController.php:            $ta_graded_gradeable = $graded_gradeable->getOrCreateTaGradedGradeable();
site/app/controllers/student/GradeInquiryController.php:            $graders = $ta_graded_gradeable->getVisibleGraders();
site/app/controllers/student/GradeInquiryController.php:            $submitter = $graded_gradeable->getSubmitter();
site/app/controllers/student/GradeInquiryController.php:            $gradeable_title = $graded_gradeable->getGradeable()->getTitle();
site/app/controllers/student/GradeInquiryController.php:                $component = $graded_gradeable->getGradeable()->getComponent($gc_id);
site/app/controllers/student/GradeInquiryController.php:                $graded_component_containers = $graded_gradeable->getTaGradedGradeable()->getGradedComponentContainers();
site/app/controllers/student/GradeInquiryController.php:                $graders = $ta_graded_gradeable->getGraders();
site/app/controllers/student/SubmissionController.php:            if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE
site/app/controllers/student/SubmissionController.php:                    || $gradeable->getTaViewStartDate() <= $now
site/app/controllers/student/SubmissionController.php:                    || $gradeable->getSubmissionOpenDate() <= $now)) {
site/app/controllers/student/SubmissionController.php:        if ($version < 1 || $version > ($graded_gradeable !== null ? $graded_gradeable->getAutoGradedGradeable()->getHighestVersion() : 0)) {
site/app/controllers/student/SubmissionController.php:            $version = $graded_gradeable !== null ? $graded_gradeable->getAutoGradedGradeable()->getActiveVersion() : 0;
site/app/controllers/student/SubmissionController.php:        //if (!$gradeable->isSubmissionOpen() && !$this->core->getUser()->accessAdmin()) {
site/app/controllers/student/SubmissionController.php:                !$gradeable->isSubmissionOpen()
site/app/controllers/student/SubmissionController.php:                || $gradeable->isStudentView() && $gradeable->isStudentViewAfterGrades() && !$gradeable->isTaGradeReleased()
site/app/controllers/student/SubmissionController.php:        else if ($gradeable->isTeamAssignment() && $graded_gradeable === null && !$this->core->getUser()->accessAdmin()) {
site/app/controllers/student/SubmissionController.php:            $url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId()]);
site/app/controllers/student/SubmissionController.php:            $this->core->getOutput()->addBreadcrumb($gradeable->getTitle(), $url);
site/app/controllers/student/SubmissionController.php:            if (!$gradeable->hasAutogradingConfig()) {
site/app/controllers/student/SubmissionController.php:                                                       'unbuiltGradeable', $gradeable->getTitle());
site/app/controllers/student/SubmissionController.php:                    && $gradeable->isTaGradeReleased()
site/app/controllers/student/SubmissionController.php:                    && $gradeable->isTaGrading()
site/app/controllers/student/SubmissionController.php:                    && $graded_gradeable->isTaGradingComplete()) {
site/app/controllers/student/SubmissionController.php:                    $graded_gradeable->getOrCreateTaGradedGradeable()->setUserViewedDate($now);
site/app/controllers/student/SubmissionController.php:                    $this->core->getQueries()->saveTaGradedGradeable($graded_gradeable->getTaGradedGradeable());
site/app/controllers/student/SubmissionController.php:                    if ($graded_gradeable->getSubmitter()->isTeam()) {
site/app/controllers/student/SubmissionController.php:                        $this->core->getQueries()->updateTeamViewedTime($graded_gradeable->getSubmitter()->getId(),$this->core->getUser()->getId());
site/app/controllers/student/SubmissionController.php:                    $show_hidden = $version == $graded_gradeable->getOrCreateTaGradedGradeable()->getGradedVersion(false) && $gradeable->isTaGradeReleased();
site/app/controllers/student/SubmissionController.php:        if($gradeable->isTeamAssignment()){
site/app/controllers/student/SubmissionController.php:                $tmp = $this->core->getQueries()->getTeamByGradeableAndUser($gradeable->getId(), $user);
site/app/controllers/student/SubmissionController.php:        if ($gradeable->isTeamAssignment() && $inconsistent_teams) {
site/app/controllers/student/SubmissionController.php:        if($gradeable->isTeamAssignment() && $null_team_count != 0 && count($teams) != 0){
site/app/controllers/student/SubmissionController.php:            $highest_version = $graded_gradeable->getAutoGradedGradeable()->getHighestVersion();
site/app/controllers/student/SubmissionController.php:        $max_size = $gradeable->getAutogradingConfig()->getMaxSubmissionSize();
site/app/controllers/student/SubmissionController.php:        $pdf_path = FileUtils::joinPaths($this->core->getConfig()->getCoursePath(), "uploads", "bulk_pdf", $gradeable->getId());
site/app/controllers/student/SubmissionController.php:            $gradeable->getId());
site/app/controllers/student/SubmissionController.php:        if ($gradeable->isTeamAssignment()) {
site/app/controllers/student/SubmissionController.php:                $team =  $graded_gradeable->getSubmitter()->getTeam();
site/app/controllers/student/SubmissionController.php:                    $gradeable->createTeam($leader_user, $members);
site/app/controllers/student/SubmissionController.php:                $team =  $this->core->getQueries()->getTeamByGradeableAndUser($gradeable->getId(), $leader);
site/app/controllers/student/SubmissionController.php:        $new_version = $graded_gradeable->getAutoGradedGradeable()->getHighestVersion() + 1;
site/app/controllers/student/SubmissionController.php:        $uploaded_file = FileUtils::joinPaths($this->core->getConfig()->getCoursePath(), "uploads", "split_pdf", $gradeable->getId(), $path);
site/app/controllers/student/SubmissionController.php:            $gradeable->getId(), $timestamp);
site/app/controllers/student/SubmissionController.php:            $gradeable->getId(), $who_id, $new_version);
site/app/controllers/student/SubmissionController.php:            "gradeable" => $gradeable->getId(),
site/app/controllers/student/SubmissionController.php:            "required_capabilities" => $gradeable->getAutogradingConfig()->getRequiredCapabilities(),
site/app/controllers/student/SubmissionController.php:            "max_possible_grading_time" => $gradeable->getAutogradingConfig()->getMaxPossibleGradingTime(),
site/app/controllers/student/SubmissionController.php:            "is_team" => $gradeable->isTeamAssignment(),
site/app/controllers/student/SubmissionController.php:        if($gradeable->isTeamAssignment()) {
site/app/controllers/student/SubmissionController.php:            $this->core->getQueries()->insertVersionDetails($gradeable->getId(), null, $team_id, $new_version, $current_time);
site/app/controllers/student/SubmissionController.php:            $this->core->getQueries()->insertVersionDetails($gradeable->getId(), $user_id, null, $new_version, $current_time);
site/app/controllers/student/SubmissionController.php:        return $this->uploadResult("Successfully uploaded version {$new_version} for {$gradeable->getTitle()} for {$who_id}");
site/app/controllers/student/SubmissionController.php:            $gradeable->getId(), $path);
site/app/controllers/student/SubmissionController.php:            $gradeable->getId(), $timestamp);
site/app/controllers/student/SubmissionController.php:        if (!$this->core->getUser()->accessFullGrading() && !$gradeable->canStudentSubmit()) {
site/app/controllers/student/SubmissionController.php:            $gradeable->getId());
site/app/controllers/student/SubmissionController.php:        if ($gradeable->isTeamAssignment()) {
site/app/controllers/student/SubmissionController.php:                $team = $graded_gradeable->getSubmitter()->getTeam();
site/app/controllers/student/SubmissionController.php:        $highest_version = $graded_gradeable->getAutoGradedGradeable()->getHighestVersion();
site/app/controllers/student/SubmissionController.php:        $num_parts = $gradeable->getAutogradingConfig()->getNumParts();
site/app/controllers/student/SubmissionController.php:        $max_size = $gradeable->getAutogradingConfig()->getMaxSubmissionSize();
site/app/controllers/student/SubmissionController.php:            $this_config_inputs = $gradeable->getAutogradingConfig()->getInputs() ?? array();
site/app/controllers/student/SubmissionController.php:            $vcs_path = $gradeable->getVcsSubdirectory();
site/app/controllers/student/SubmissionController.php:            if ($gradeable->getVcsHostType() == 0 || $gradeable->getVcsHostType() == 1) {
site/app/controllers/student/SubmissionController.php:            if ($gradeable->getVcsHostType() == 2 || $gradeable->getVcsHostType() == 3) {
site/app/controllers/student/SubmissionController.php:            $total = count($gradeable->getComponents());
site/app/controllers/student/SubmissionController.php:            foreach ($gradeable->getComponents() as $question) {
site/app/controllers/student/SubmissionController.php:                                   $gradeable->getId(), $who_id, $new_version);
site/app/controllers/student/SubmissionController.php:            "gradeable" => $gradeable->getId(),
site/app/controllers/student/SubmissionController.php:            "required_capabilities" => $gradeable->getAutogradingConfig()->getRequiredCapabilities(),
site/app/controllers/student/SubmissionController.php:            "max_possible_grading_time" => $gradeable->getAutogradingConfig()->getMaxPossibleGradingTime(),
site/app/controllers/student/SubmissionController.php:            "is_team" => $gradeable->isTeamAssignment(),
site/app/controllers/student/SubmissionController.php:        if ($gradeable->isTeamAssignment()) {
site/app/controllers/student/SubmissionController.php:            "{$this->core->getConfig()->getSemester()}:{$this->core->getConfig()->getCourse()}:submission:{$gradeable->getId()}"
site/app/controllers/student/SubmissionController.php:        if($gradeable->isTeamAssignment()) {
site/app/controllers/student/SubmissionController.php:            $this->core->getQueries()->insertVersionDetails($gradeable->getId(), null, $team_id, $new_version, $current_time);
site/app/controllers/student/SubmissionController.php:            $team_members = $graded_gradeable->getSubmitter()->getTeam()->getMembers();
site/app/controllers/student/SubmissionController.php:            $subject = "Team Member Submission: ".$graded_gradeable->getGradeable()->getTitle();
site/app/controllers/student/SubmissionController.php:            $content = "A team member, $original_user_id, submitted in the gradeable, ".$graded_gradeable->getGradeable()->getTitle();
site/app/controllers/student/SubmissionController.php:            $this->core->getQueries()->insertVersionDetails($gradeable->getId(), $user_id, null, $new_version, $current_time);
site/app/controllers/student/SubmissionController.php:            $message = "Successfully uploaded version {$new_version} for {$gradeable->getTitle()}";
site/app/controllers/student/SubmissionController.php:            $message = "Successfully uploaded version {$new_version} for {$gradeable->getTitle()} for {$who_id}";
site/app/controllers/student/SubmissionController.php:        $url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId()]);
site/app/controllers/student/SubmissionController.php:        if ($gradeable->isTeamAssignment() && $graded_gradeable === null) {
site/app/controllers/student/SubmissionController.php:        $highest_version = $graded_gradeable->getAutoGradedGradeable()->getHighestVersion();
site/app/controllers/student/SubmissionController.php:        if (!$this->core->getUser()->accessGrading() && !$gradeable->isStudentSubmit()) {
site/app/controllers/student/SubmissionController.php:        $submitter_id = $graded_gradeable->getSubmitter()->getId();
site/app/controllers/student/SubmissionController.php:            $gradeable->getId(), $submitter_id, "user_assignment_settings.json");
site/app/controllers/student/SubmissionController.php:            $this->core->redirect($this->core->buildCourseUrl(['gradeable', $gradeable->getId()]));
site/app/controllers/student/SubmissionController.php:        if($gradeable->isTeamAssignment()) {
site/app/controllers/student/SubmissionController.php:            $this->core->getQueries()->updateActiveVersion($gradeable->getId(), null, $submitter_id, $version);
site/app/controllers/student/SubmissionController.php:            $this->core->getQueries()->updateActiveVersion($gradeable->getId(), $submitter_id, null, $version);
site/app/controllers/student/SubmissionController.php:            $this->core->redirect($this->core->buildCourseUrl(['gradeable', $graded_gradeable->getGradeableId(), 'grading', 'grade']). '?'
site/app/controllers/student/SubmissionController.php:            $this->core->redirect($this->core->buildCourseUrl(['gradeable', $gradeable->getId(), $new_version]));
site/app/controllers/student/SubmissionController.php:        if ($gradeable !== null && $gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/student/TeamController.php:            return $this->core->getOutput()->renderJsonFail($gradeable->getTitle() . " is not a team assignment");
site/app/controllers/student/TeamController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/student/TeamController.php:        $team = $graded_gradeable->getSubmitter()->getTeam();
site/app/controllers/student/TeamController.php:        if ($date->format('Y-m-d H:i:s') > $gradeable->getTeamLockDate()->format('Y-m-d H:i:s')) {
site/app/controllers/student/TeamController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/student/TeamController.php:        $team = $graded_gradeable->getSubmitter()->getTeam();
site/app/controllers/student/TeamController.php:        if ($date->format('Y-m-d H:i:s') > $gradeable->getTeamLockDate()->format('Y-m-d H:i:s')) {
site/app/controllers/student/TeamController.php:        if (($team->getSize() + count($team->getInvitations())) >= $gradeable->getTeamSizeMax()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("Cannot send invitation. Max team size is {$gradeable->getTeamSizeMax()}");
site/app/controllers/student/TeamController.php:        $subject = "New Team Invitation: ".$graded_gradeable->getGradeable()->getTitle();
site/app/controllers/student/TeamController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/student/TeamController.php:        if ($accept_team->getSize() >= $gradeable->getTeamSizeMax()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("Cannot accept invitation. Max team size is {$gradeable->getTeamSizeMax()}");
site/app/controllers/student/TeamController.php:        $subject = "New Team Member: ".$gradeable->getTitle();
site/app/controllers/student/TeamController.php:        $content = "A new team member with the user name, $user_id, joined your team for gradeable, ".$gradeable->getTitle();
site/app/controllers/student/TeamController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/student/TeamController.php:        $team = $graded_gradeable->getSubmitter()->getTeam();
site/app/controllers/student/TeamController.php:        if ($date->format('Y-m-d H:i:s') > $gradeable->getTeamLockDate()->format('Y-m-d H:i:s')) {
site/app/controllers/student/TeamController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/student/TeamController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/student/TeamController.php:        if (!$gradeable->isTeamAssignment()) {
site/app/controllers/student/TeamController.php:            $this->core->addErrorMessage("{$gradeable->getTitle()} is not a team assignment");
site/app/controllers/student/TeamController.php:            $team = $graded_gradeable->getSubmitter()->getTeam();
site/app/controllers/student/TeamController.php:        $lock = $date->format('Y-m-d H:i:s') > $gradeable->getTeamLockDate()->format('Y-m-d H:i:s');
site/app/libraries/Access.php:                $gradeable = $graded_gradeable->getGradeable();
site/app/libraries/Access.php:                if (!$this->checkGroupPrivilege($group, $gradeable->getMinGradingGroup())) {
site/app/libraries/Access.php:                        !($group === User::GROUP_FULL_ACCESS_GRADER && !$gradeable->isTaGrading())
site/app/libraries/Access.php:                        !($group === User::GROUP_STUDENT && $gradeable->isPeerGrading())
site/app/libraries/Access.php:                if ($graded_gradeable !== null && $graded_gradeable->getAutoGradedGradeable()->getActiveVersion() <= 0) {
site/app/libraries/Access.php:                    if (!$gradeable->isStudentView()) {
site/app/libraries/Access.php:                $can_submit = $gradeable->isStudentSubmit();
site/app/libraries/Access.php:                    if ($graded_gradeable !== null && $version !== $graded_gradeable->getAutoGradedGradeable()->getActiveVersion()) {
site/app/libraries/Access.php:        $gradeable = $graded_gradeable->getGradeable();
site/app/libraries/Access.php:        if ($gradeable->getGradeStartDate() <= $now) {
site/app/libraries/Access.php:            $sections = $gradeable->getGradingSectionsForUser($user);
site/app/libraries/Access.php:                if ($gradeable->isTeamAssignment()) {
site/app/libraries/Access.php:                    if ($section->containsTeam($graded_gradeable->getSubmitter()->getTeam())) {
site/app/libraries/Access.php:                    if ($section->containsUser($graded_gradeable->getSubmitter()->getUser())) {
site/app/libraries/Access.php:        $sections = $gradeable->getGradingSectionsForUser($user);
site/app/libraries/Access.php:        $gradeable = $graded_gradeable->getGradeable();
site/app/libraries/Access.php:        if (!$gradeable->isPeerGrading()) {
site/app/libraries/Access.php:            $user_ids_to_grade = $this->core->getQueries()->getPeerAssignment($gradeable->getId(), $user->getId());
site/app/libraries/Access.php:            return in_array($graded_gradeable->getSubmitter()->getId(), $user_ids_to_grade);
site/app/libraries/Access.php:            if ($graded_gradeable->getSubmitter()->getTeam() !== null) {
site/app/libraries/Access.php:                return $graded_gradeable->getSubmitter()->getTeam()->hasMember($user->getId());
site/app/libraries/Access.php:            return $graded_gradeable->getSubmitter()->getUser()->getId() === $user->getId();
site/app/libraries/Access.php:            if ($graded_gradeable->getSubmitter()->isTeam()) {
site/app/libraries/Access.php:                    return $graded_gradeable->getSubmitter()->getId() === $submitter->getId();
site/app/libraries/Access.php:                    return $graded_gradeable->getSubmitter()->getTeam()->hasMember($submitter->getId());
site/app/libraries/Access.php:            return $graded_gradeable->getSubmitter()->getId() === $submitter->getId();
site/app/libraries/Access.php:                            if ($gradeable->getId() !== $value) {
site/app/libraries/database/DatabaseQueries.php:        $table = $gradeable->isTeamAssignment() ? 'gradeable_teams' : 'users';
site/app/libraries/database/DatabaseQueries.php:        $grade_type = $gradeable->isGradeByRegistration() ? 'registration' : 'rotating';
site/app/libraries/database/DatabaseQueries.php:        $type = $gradeable->isTeamAssignment() ? 'team' : 'user';
site/app/libraries/database/DatabaseQueries.php:        $params = array($gradeable->getId());
site/app/libraries/database/DatabaseQueries.php:        $grade_type = $gradeable->isGradeByRegistration() ? 'registration' : 'rotating';
site/app/libraries/database/DatabaseQueries.php:        $params = array($gradeable->getId());
site/app/libraries/database/DatabaseQueries.php:        $params = array($gradeable->getId());
site/app/libraries/database/DatabaseQueries.php:         $grade_type = $gradeable->isGradeByRegistration() ? 'registration' : 'rotating';
site/app/libraries/database/DatabaseQueries.php:         if ($gradeable->isGradeByRegistration()) {
site/app/libraries/database/DatabaseQueries.php:         $grade_type = $gradeable->isGradeByRegistration() ? 'registration' : 'rotating';
site/app/libraries/database/DatabaseQueries.php:        if ($gradeable->getGdId() !== null && $gradeable->getUser() !== null) {
site/app/libraries/database/DatabaseQueries.php:                array($gradeable->getGdId(), $gradeable->getUser()->getId()));
site/app/libraries/database/DatabaseQueries.php:        if ($gradeable->getGdId() !== null && $gradeable->getUser() !== null) {
site/app/libraries/database/DatabaseQueries.php:                array($gradeable->getGdId(), $gradeable->getUser()->getId()));
site/app/libraries/database/DatabaseQueries.php:        $params = array($gradeable->getId());
site/app/libraries/database/DatabaseQueries.php:        $params = array($graded_gradeable->getGradeableId(), $graded_gradeable->getSubmitter()->getId(), RegradeRequest::STATUS_ACTIVE, $gc_id);
site/app/libraries/database/DatabaseQueries.php:        $submitter_col = $graded_gradeable->getSubmitter()->isTeam() ? 'team_id' : 'user_id';
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getId(),
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getTitle(),
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getInstructionsUrl(),
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getTaInstructions(),
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getType(),
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getGraderAssignmentMethod(),
site/app/libraries/database/DatabaseQueries.php:            DateUtils::dateTimeToString($gradeable->getTaViewStartDate()),
site/app/libraries/database/DatabaseQueries.php:            DateUtils::dateTimeToString($gradeable->getGradeStartDate()),
site/app/libraries/database/DatabaseQueries.php:            DateUtils::dateTimeToString($gradeable->getGradeDueDate()),
site/app/libraries/database/DatabaseQueries.php:            DateUtils::dateTimeToString($gradeable->getGradeReleasedDate()),
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getGradeLockedDate() !== null ?
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getGradeLockedDate()) : null,
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getMinGradingGroup(),
site/app/libraries/database/DatabaseQueries.php:            $gradeable->getSyllabusBucket()
site/app/libraries/database/DatabaseQueries.php:        if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getId(),
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getSubmissionOpenDate()),
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getSubmissionDueDate()),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isVcs()),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getVcsSubdirectory(),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getVcsHostType(),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isTeamAssignment()),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getTeamSizeMax(),
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getTeamLockDate()),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isTaGrading()),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isScannedExam()),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isStudentView()),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isStudentViewAfterGrades()),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isStudentSubmit()),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->hasDueDate()),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getAutogradingConfigPath(),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getLateDays(),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isLateSubmissionAllowed()),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getPrecision(),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isPeerGrading()),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getPeerGradeSet(),
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getRegradeRequestDate()),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isRegradeAllowed()),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getDiscussionThreadId(),
site/app/libraries/database/DatabaseQueries.php:                $this->course_db->convertBoolean($gradeable->isDiscussionBased())
site/app/libraries/database/DatabaseQueries.php:        $this->setupRotatingSections($gradeable->getRotatingGraderSections(), $gradeable->getId());
site/app/libraries/database/DatabaseQueries.php:        $components = $gradeable->getComponents();
site/app/libraries/database/DatabaseQueries.php:        $this->deleteComponents($gradeable->getDeletedComponents());
site/app/libraries/database/DatabaseQueries.php:        if ($gradeable->isModified()) {
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getTitle(),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getInstructionsUrl(),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getTaInstructions(),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getType(),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getGraderAssignmentMethod(),
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getTaViewStartDate()),
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getGradeStartDate()),
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getGradeDueDate()),
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($gradeable->getGradeReleasedDate()),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getGradeLockedDate() !== null ?
site/app/libraries/database/DatabaseQueries.php:                    DateUtils::dateTimeToString($gradeable->getGradeLockedDate()) : null,
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getMinGradingGroup(),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getSyllabusBucket(),
site/app/libraries/database/DatabaseQueries.php:                $gradeable->getId()
site/app/libraries/database/DatabaseQueries.php:            if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/libraries/database/DatabaseQueries.php:                    DateUtils::dateTimeToString($gradeable->getSubmissionOpenDate()),
site/app/libraries/database/DatabaseQueries.php:                    DateUtils::dateTimeToString($gradeable->getSubmissionDueDate()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isVcs()),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getVcsSubdirectory(),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getVcsHostType(),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isTeamAssignment()),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getTeamSizeMax(),
site/app/libraries/database/DatabaseQueries.php:                    DateUtils::dateTimeToString($gradeable->getTeamLockDate()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isTaGrading()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isScannedExam()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isStudentView()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isStudentViewAfterGrades()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isStudentSubmit()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->hasDueDate()),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getAutogradingConfigPath(),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getLateDays(),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isLateSubmissionAllowed()),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getPrecision(),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isPeerGrading()),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getPeerGradeSet(),
site/app/libraries/database/DatabaseQueries.php:                    DateUtils::dateTimeToString($gradeable->getRegradeRequestDate()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isRegradeAllowed()),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isGradeInquiryPerComponentAllowed()),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getDiscussionThreadId(),
site/app/libraries/database/DatabaseQueries.php:                    $this->course_db->convertBoolean($gradeable->isDiscussionBased()),
site/app/libraries/database/DatabaseQueries.php:                    $gradeable->getId()
site/app/libraries/database/DatabaseQueries.php:        if ($gradeable->isRotatingGraderSectionsModified()) {
site/app/libraries/database/DatabaseQueries.php:            $this->setupRotatingSections($gradeable->getRotatingGraderSections(), $gradeable->getId());
site/app/libraries/database/DatabaseQueries.php:        foreach ($ta_graded_gradeable->getGradedComponentContainers() as $container) {
site/app/libraries/database/DatabaseQueries.php:        foreach ($ta_graded_gradeable->getDeletedGradedComponents() as $component_grade) {
site/app/libraries/database/DatabaseQueries.php:        $ta_graded_gradeable->clearDeletedGradedComponents();
site/app/libraries/database/DatabaseQueries.php:        $submitter_id = $ta_graded_gradeable->getGradedGradeable()->getSubmitter()->getId();
site/app/libraries/database/DatabaseQueries.php:        $is_team = $ta_graded_gradeable->getGradedGradeable()->getSubmitter()->isTeam();
site/app/libraries/database/DatabaseQueries.php:            $ta_graded_gradeable->getGradedGradeable()->getGradeable()->getId(),
site/app/libraries/database/DatabaseQueries.php:            $ta_graded_gradeable->getOverallComment(),
site/app/libraries/database/DatabaseQueries.php:            $ta_graded_gradeable->getUserViewedDate() !== null ?
site/app/libraries/database/DatabaseQueries.php:                DateUtils::dateTimeToString($ta_graded_gradeable->getUserViewedDate()) : null,
site/app/libraries/database/DatabaseQueries.php:        $ta_graded_gradeable->setIdFromDatabase($this->course_db->getLastInsertId());
site/app/libraries/database/DatabaseQueries.php:        if ($ta_graded_gradeable->isModified()) {
site/app/libraries/database/DatabaseQueries.php:                $ta_graded_gradeable->getOverallComment(),
site/app/libraries/database/DatabaseQueries.php:                $ta_graded_gradeable->getUserViewedDate() !== null ?
site/app/libraries/database/DatabaseQueries.php:                    DateUtils::dateTimeToString($ta_graded_gradeable->getUserViewedDate()) : null,
site/app/libraries/database/DatabaseQueries.php:                $ta_graded_gradeable->getId()
site/app/libraries/database/DatabaseQueries.php:        if($ta_graded_gradeable->getId() < 1) {
site/app/libraries/database/DatabaseQueries.php:        $this->course_db->query("DELETE FROM gradeable_data WHERE gd_id=?", [$ta_graded_gradeable->getId()]);
site/app/libraries/database/DatabaseQueries.php:            [$gradeable->getId(), $submitter->getId(), $submitter->getId()]);
site/app/libraries/database/DatabaseQueries.php:        $component_count = count($gradeable->getComponents());
site/app/libraries/database/DatabaseQueries.php:        $gradeable_id = $gradeable->getId();
site/app/libraries/database/DatabaseQueries.php:        $rotation_sections = $gradeable->getRotatingGraderSections();
site/app/libraries/database/DatabaseQueries.php:        if($gradeable->isTeamAssignment()) {
site/app/libraries/database/PostgresqlDatabaseQueries.php:            if ($gradeable->isTeamAssignment()) {
site/app/libraries/database/PostgresqlDatabaseQueries.php:            $gradeables_by_id[$gradeable->getId()] = $gradeable;
site/app/libraries/database/PostgresqlDatabaseQueries.php:            if ($gradeable->isTeamAssignment()) {
site/app/libraries/database/PostgresqlDatabaseQueries.php:                $graded_gradeable->setTaGradedGradeable($ta_graded_gradeable);
site/app/libraries/database/PostgresqlDatabaseQueries.php:            $graded_gradeable->setAutoGradedGradeable($auto_graded_gradeable);
site/app/libraries/database/PostgresqlDatabaseQueries.php:                $graded_gradeable->setRegradeRequests($grade_inquiries_arr);
site/app/libraries/database/PostgresqlDatabaseQueries.php:                            $gradeable->getComponent($db_row_split['comp_id'][$i]),
site/app/libraries/database/PostgresqlDatabaseQueries.php:                foreach ($gradeable->getComponents() as $component) {
site/app/libraries/database/PostgresqlDatabaseQueries.php:                $ta_graded_gradeable->setGradedComponentContainersFromDatabase($containers);
site/app/libraries/database/PostgresqlDatabaseQueries.php:                $auto_graded_gradeable->setAutoGradedVersions($graded_versions);
site/app/libraries/database/PostgresqlDatabaseQueries.php:                if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/libraries/database/PostgresqlDatabaseQueries.php:            $gradeable->setComponentsFromDatabase($components);
site/app/libraries/database/PostgresqlDatabaseQueries.php:        $params = array_merge($submitter_ids, [$gradeable->getId(), $gradeable->getId()]);
site/app/models/GradingOrder.php:            $this->sections = $gradeable->getAllGradingSections();
site/app/models/GradingOrder.php:            $this->sections = $gradeable->getGradingSectionsForUser($user);
site/app/models/GradingOrder.php:            if ($gradeable->isTeamAssignment()) {
site/app/models/GradingOrder.php:                    return md5($a->getId() . $this->gradeable->getId());
site/app/models/GradingOrder.php:        return $this->gradeable->isGradeByRegistration() ? "registration_section" : "rotating_section";
site/app/models/RainbowCustomization.php:            $bucket = $gradeable->getSyllabusBucket() == "none (for practice only)" ? "none" : $gradeable->getSyllabusBucket();
site/app/models/RainbowCustomization.php:            $max_score = $gradeable->getTAPoints();
site/app/models/RainbowCustomization.php:            if ($gradeable->hasAutogradingConfig()){
site/app/models/RainbowCustomization.php:                $max_score += $gradeable->getAutogradingConfig()->getTotalNonExtraCredit();
site/app/models/RainbowCustomization.php:                "id" => $gradeable->getId(),
site/app/models/RainbowCustomization.php:                "title" => $gradeable->getTitle(),
site/app/models/RainbowCustomization.php:                $this->used_buckets[] = $json_gradeable->type;
site/app/models/RainbowCustomization.php:                $retArray[$json_gradeable->type] = (int)($json_gradeable->percent * 100);
site/app/models/RainbowCustomization.php:                $sum += $retArray[$json_gradeable->type];
site/app/models/Team.php:            $settings_file = FileUtils::joinPaths($this->core->getConfig()->getCoursePath(), "submissions", $gradeable->getId(), $this->getId(), "user_assignment_settings.json");
site/app/models/gradeable/AutoGradedVersion.php:        $submitter_id = $this->graded_gradeable->getSubmitter()->getId();
site/app/models/gradeable/AutoGradedVersion.php:        $gradeable = $this->graded_gradeable->getGradeable();
site/app/models/gradeable/AutoGradedVersion.php:        $config = $gradeable->getAutogradingConfig();
site/app/models/gradeable/AutoGradedVersion.php:        $dirs = $gradeable->isVcs() ? ['submissions', 'checkout'] : ['submissions'];
site/app/models/gradeable/AutoGradedVersion.php:            $path = FileUtils::joinPaths($course_path, $dir, $gradeable->getId(), $submitter_id, $this->version);
site/app/models/gradeable/AutoGradedVersion.php:        $submitter_id = $this->graded_gradeable->getSubmitter()->getId();
site/app/models/gradeable/AutoGradedVersion.php:        $gradeable = $this->graded_gradeable->getGradeable();
site/app/models/gradeable/AutoGradedVersion.php:        $config = $gradeable->getAutogradingConfig();
site/app/models/gradeable/AutoGradedVersion.php:        $results_path = FileUtils::joinPaths($course_path, 'results', $gradeable->getId(), $submitter_id, $this->version);
site/app/models/gradeable/AutoGradedVersion.php:        $results_public_path = FileUtils::joinPaths($course_path, 'results_public', $gradeable->getId(), $submitter_id, $this->version);
site/app/models/gradeable/AutoGradedVersion.php:            'checkout' => ($this->graded_gradeable->getGradeable()->isVcs()) ? $this->files['checkout'][$part] : []);
site/app/models/gradeable/AutoGradedVersion.php:        return array('submissions' => $this->meta_files['submissions'], 'checkout' => ($this->graded_gradeable->getGradeable()->isVcs()) ? $this->meta_files['checkout'] : []);
site/app/models/gradeable/AutoGradedVersion.php:        $divisor = $this->graded_gradeable->getGradeable()->getAutogradingConfig()->getTotalNonHiddenNonExtraCredit();
site/app/models/gradeable/AutoGradedVersion.php:        $config = $this->graded_gradeable->getGradeable()->getAutogradingConfig();
site/app/models/gradeable/Component.php:        return $this->peer ? $this->gradeable->getPeerGradeSet() : 1;
site/app/models/gradeable/GradeableList.php:            $this->gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:            if ($gradeable->getGradeReleasedDate() <= $this->now) {
site/app/models/gradeable/GradeableList.php:                $this->graded_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:            else if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE && !$gradeable->hasDueDate()) {
site/app/models/gradeable/GradeableList.php:                if ($gradeable->isStudentSubmit()) {
site/app/models/gradeable/GradeableList.php:                    if ($gradeable->getGradeStartDate() < $this->core->getDateTimeNow() && $this->core->getUser()->accessGrading()) {
site/app/models/gradeable/GradeableList.php:                        $this->grading_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:                        $this->open_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:                    $this->grading_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:            else if ((($gradeable->getType() === GradeableType::ELECTRONIC_FILE && $gradeable->isTaGrading()) ||
site/app/models/gradeable/GradeableList.php:                    $gradeable->getType() !== GradeableType::ELECTRONIC_FILE) &&
site/app/models/gradeable/GradeableList.php:                    $gradeable->getGradeStartDate() <= $this->now) {
site/app/models/gradeable/GradeableList.php:                $this->grading_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:            else if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE &&
site/app/models/gradeable/GradeableList.php:                $gradeable->getSubmissionOpenDate() <= $this->now && $gradeable->getSubmissionDueDate() <= $this->now) {
site/app/models/gradeable/GradeableList.php:                $this->closed_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:            else if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE &&
site/app/models/gradeable/GradeableList.php:                $gradeable->getSubmissionOpenDate() <= $this->now && $gradeable->getTaViewStartDate() <= $this->now) {
site/app/models/gradeable/GradeableList.php:                $this->open_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:            else if ($this->core->getUser()->accessGrading() && $gradeable->getTaViewStartDate() <= $this->now) {
site/app/models/gradeable/GradeableList.php:                $this->beta_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:                $this->future_gradeables[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradeableList.php:            if ($type !== null && $gradeable->getType() === $type) {
site/app/models/gradeable/GradeableList.php:                if ($type === $gradeable->getType()) {
site/app/models/gradeable/GradeableList.php:            if ($gradeable->getType() !== GradeableType::ELECTRONIC_FILE) {
site/app/models/gradeable/GradeableList.php:                ($gradeable->getTaViewStartDate() <= $this->now && $this->core->getUser()->accessGrading()) ||
site/app/models/gradeable/GradeableList.php:                $gradeable->getSubmissionOpenDate() <= $this->now) {
site/app/models/gradeable/GradeableList.php:                $return[$gradeable->getId()] = $gradeable;
site/app/models/gradeable/GradedComponentContainer.php:        return $this->ta_graded_gradeable->getGradedGradeable()->getGradeable()->roundPointValue($points_earned);
site/app/models/gradeable/GradedGradeable.php:        $this->gradeable_id = $gradeable->getId();
site/app/models/gradeable/GradedGradeable.php:        return $this->ta_graded_gradeable !== null && $this->ta_graded_gradeable->anyGrades();
site/app/models/gradeable/GradedGradeable.php:        return $this->hasTaGradingInfo() && $this->ta_graded_gradeable->isComplete();
site/app/models/gradeable/GradedGradeable.php:                if ($this->gradeable->isGradeInquiryPerComponentAllowed()) {
site/app/models/gradeable/GradedGradeable.php:        if (!$this->gradeable->isGradeInquiryPerComponentAllowed()) {
site/app/models/gradeable/GradedGradeable.php:            if($this->gradeable->isTeamAssignment()) {
site/app/models/gradeable/GradedGradeable.php:            $userWithOverriddenGrades = $this->core->getQueries()->getAUserWithOverriddenGrades($this->gradeable->getId(),$this->submitter->getId());
site/app/models/gradeable/GradedGradeable.php:        $userWithOverriddenGrades = $this->core->getQueries()->getAUserWithOverriddenGrades($this->gradeable->getId(),$this->submitter->getId());
site/app/models/gradeable/GradedGradeable.php:        return $this->gradeable->hasSubmission($this->submitter);
site/app/models/gradeable/GradedGradeable.php:        return $this->gradeable->hasOverriddenGrades($this->submitter);
site/app/models/gradeable/LateDayInfo.php:        if (!$graded_gradeable->getSubmitter()->hasUser($user)) {
site/app/models/gradeable/LateDayInfo.php:            'gradeable_title' => $this->graded_gradeable->getGradeable()->getTitle(),
site/app/models/gradeable/LateDayInfo.php:            'submission_due_date' => $this->graded_gradeable->getGradeable()->getSubmissionDueDate()->format('m/d/y'),
site/app/models/gradeable/LateDayInfo.php:            'g_allowed_late_days' => $this->graded_gradeable->getGradeable()->getLateDays(),
site/app/models/gradeable/LateDayInfo.php:            'grade_inquiries' => $this->graded_gradeable->getGradeInquiryCount()
site/app/models/gradeable/LateDayInfo.php:        return $this->graded_gradeable->getGradeable()->getLateDays();
site/app/models/gradeable/LateDayInfo.php:                if ($this->graded_gradeable->getAutoGradedGradeable()->hasSubmission()) {
site/app/models/gradeable/LateDayInfo.php:        return $this->graded_gradeable->getAutoGradedGradeable()->hasActiveVersion();
site/app/models/gradeable/LateDayInfo.php:        return $this->graded_gradeable->getAutoGradedGradeable()->getActiveVersionInstance()->getDaysLate();
site/app/models/gradeable/LateDayInfo.php:        return $this->graded_gradeable->getGradeInquiryCount();
site/app/models/gradeable/LateDays.php:                $this->getLateDaysRemainingByContext($graded_gradeable->getGradeable()->getSubmissionDueDate()));
site/app/models/gradeable/LateDays.php:            $this->late_day_info[$graded_gradeable->getGradeableId()] = $info;
site/app/models/gradeable/LateDays.php:        if ($gradeable->getType() !== GradeableType::ELECTRONIC_FILE) {
site/app/models/gradeable/LateDays.php:        if (!$gradeable->isStudentSubmit() || !$gradeable->hasDueDate() || !$gradeable->isLateSubmissionAllowed()) {
site/app/models/gradeable/LateDays.php:        if (!$user->accessAdmin() && !$gradeable->hasAutogradingConfig()) {
site/app/models/gradeable/LateDays.php:        if (!$gradeable->isStudentView() && !$user->accessGrading()) {
site/app/models/gradeable/LateDays.php:        if (!$gradeable->isTaViewOpen() && !$user->accessAdmin()) {
site/app/models/gradeable/LateDays.php:        if (!$gradeable->isSubmissionOpen() && !$user->accessGrading()) {
site/app/models/gradeable/LateDays.php:        return $this->late_day_info[$gradeable->getId()] ?? null;
site/app/models/gradeable/TaGradedGradeable.php:        foreach ($graded_gradeable->getGradeable()->getComponents() as $component) {
site/app/models/gradeable/TaGradedGradeable.php:        $versions = $this->graded_gradeable->getAutoGradedGradeable()->getAutoGradedVersions();
site/app/templates/Navigation.twig:                <div id="{{ g_info.id }}" class="gradeable-row">
site/app/templates/admin/Configuration.twig:        <label for="room-seating-gradeable-id" class="config-row">
site/app/templates/admin/Configuration.twig:            <select name="room_seating_gradeable_id" id="room-seating-gradeable-id">
site/app/templates/admin/Extensions.twig:                <select name="g_id" id="gradeable-select" onchange="updateGradeableForExtensions()">
site/app/templates/admin/RainbowCustomization.twig:                                                <span style="font-style: italic;font-size: 0.8em;" class="gradeable-id">{{ gradeable["id"] }}</span>
site/app/templates/admin/admin_gradeable/AdminGradeableAuto.twig:    <div class="btn-container" id="rebuild-gradeable-button">
site/app/templates/admin/admin_gradeable/AdminGradeableBase.twig:    <form id="gradeable-form" class="form-signin" action="{{ submit_url }}"
site/app/templates/admin/admin_gradeable/AdminGradeableCreate.twig:            <b style='font-size:18px'>Gradeable type</b>: <span id="gradeable-type-string">{{ type_string }}</span>
site/app/templates/admin/admin_gradeable/AdminGradeableDates.twig:<div id="gradeable-dates">
site/app/templates/admin/admin_gradeable/AdminGradeableDates.twig:        $('#gradeable-dates').find('div,input').show();
site/app/templates/grading/electronic/RubricPanel.twig:                    <span id="gradeable-version-container" data-gradeable_version="{{ display_version }}" hidden></span>
site/app/templates/navigation/DeleteGradeableForm.twig:{% block popup_id %}delete-gradeable-form{% endblock %}
site/app/templates/navigation/DeleteGradeableForm.twig:    <div name="delete-gradeable-message">
site/app/templates/submission/homework/SubmitBox.twig:    <header id="gradeable-info">
site/app/views/AutoGradingView.php:        $gradeable = $graded_gradeable->getGradeable();
site/app/views/AutoGradingView.php:        $autograding_config = $gradeable->getAutogradingConfig();
site/app/views/AutoGradingView.php:            if ($gradeable->isTaGradeReleased()) {
site/app/views/AutoGradingView.php:            'gradeable_id' => $gradeable->getId(),
site/app/views/AutoGradingView.php:            'submitter_id' => $graded_gradeable->getSubmitter()->getId(),
site/app/views/AutoGradingView.php:            'is_ta_grade_released' => $gradeable->isTaGradeReleased(),
site/app/views/AutoGradingView.php:            'is_ta_grading' => $gradeable->isTaGrading(),
site/app/views/AutoGradingView.php:            'hide_version_and_test_details' => $gradeable->getAutogradingConfig()->getHideVersionAndTestDetails()
site/app/views/AutoGradingView.php:        $gradeable = $graded_gradeable->getGradeable();
site/app/views/AutoGradingView.php:            "gradeable_id" => $gradeable->getId(),
site/app/views/AutoGradingView.php:        $gradeable = $ta_graded_gradeable->getGradedGradeable()->getGradeable();
site/app/views/AutoGradingView.php:        $active_version = $ta_graded_gradeable->getGradedGradeable()->getAutoGradedGradeable()->getActiveVersion();
site/app/views/AutoGradingView.php:        $version_instance = $ta_graded_gradeable->getGradedVersionInstance();
site/app/views/AutoGradingView.php:        foreach ($gradeable->getComponents() as $component) {
site/app/views/AutoGradingView.php:            $container = $ta_graded_gradeable->getGradedComponentContainer($component);
site/app/views/AutoGradingView.php:        }, $ta_graded_gradeable->getVisibleGraders());
site/app/views/AutoGradingView.php:        if ($gradeable->isPeerGrading()) {
site/app/views/AutoGradingView.php:        $total_score = $graded_score = $ta_graded_gradeable->getTotalScore();
site/app/views/AutoGradingView.php:        $total_max = $graded_max = $gradeable->getTaPoints();
site/app/views/AutoGradingView.php:        $has_autograding = $gradeable->getAutogradingConfig()->anyVisibleTestcases();
site/app/views/AutoGradingView.php:            $total_max += $gradeable->getAutogradingConfig()->getTotalNonExtraCredit();
site/app/views/AutoGradingView.php:        $total_score = $gradeable->roundPointValue($total_score);
site/app/views/AutoGradingView.php:        $regrade_allowed = $gradeable->isRegradeAllowed();
site/app/views/AutoGradingView.php:        $regrade_date = $gradeable->getRegradeRequestDate();
site/app/views/AutoGradingView.php:        $regrade_date=DateUtils::dateTimeToString($gradeable->getRegradeRequestDate());
site/app/views/AutoGradingView.php:        $precision_parts = explode('.', strval($gradeable->getPrecision()));
site/app/views/AutoGradingView.php:            $container = $ta_graded_gradeable->getGradedComponentContainer($component);
site/app/views/AutoGradingView.php:        }, $gradeable->getComponents());
site/app/views/AutoGradingView.php:        $can_download = !$gradeable->isVcs();
site/app/views/AutoGradingView.php:        $gradeable_id = $gradeable->getId();
site/app/views/AutoGradingView.php:        if($gradeable->isTeamAssignment()){
site/app/views/AutoGradingView.php:            'been_ta_graded' => $ta_graded_gradeable->isComplete(),
site/app/views/AutoGradingView.php:            'overall_comment' => $ta_graded_gradeable->getOverallComment(),
site/app/views/AutoGradingView.php:            'is_peer' => $gradeable->isPeerGrading(),
site/app/views/AutoGradingView.php:            'gradeable_id' => $gradeable->getId(),
site/app/views/AutoGradingView.php:            'student_pdf_view_url' => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'pdf']),
site/app/views/NavigationView.php:                $graded_gradeable = $graded_gradeables[$gradeable->getId()] ?? null;
site/app/views/NavigationView.php:                $buttons = $this->getButtons($gradeable, $graded_gradeable, $list_section, $submit_everyone[$gradeable->getId()]);
site/app/views/NavigationView.php:                    "id" => $gradeable->getId(),
site/app/views/NavigationView.php:                    "name" => $gradeable->getTitle(),
site/app/views/NavigationView.php:                    "url" => $gradeable->getInstructionsUrl(),
site/app/views/NavigationView.php:                    "has_build_error" => $gradeable->anyBuildErrors()
site/app/views/NavigationView.php:            $buttons[] = $gradeable->canDelete() ? $this->getDeleteButton($gradeable) : null;
site/app/views/NavigationView.php:        return $gradeable->isTeamAssignment();
site/app/views/NavigationView.php:        return $gradeable->getType() === GradeableType::ELECTRONIC_FILE;
site/app/views/NavigationView.php:        $im_allowed_to_view_submissions = $this->core->getUser()->accessGrading() && !$gradeable->isTaGrading() && $this->core->getUser()->accessFullGrading();
site/app/views/NavigationView.php:        $im_a_grader = $this->core->getUser()->accessGrading() && $this->core->getUser()->getGroup() <= $gradeable->getMinGradingGroup();
site/app/views/NavigationView.php:        $im_a_peer_grader = $this->core->getUser()->getGroup() === User::GROUP_STUDENT && $gradeable->isPeerGrading();
site/app/views/NavigationView.php:        $past_lock_date = $date < $gradeable->getTeamLockDate();
site/app/views/NavigationView.php:            $team_display_date = "(teams lock {$gradeable->getTeamLockDate()->format(self::DATE_FORMAT)})";
site/app/views/NavigationView.php:        if ($graded_gradeable === null || $graded_gradeable->getSubmitter()->getTeam() === null) {
site/app/views/NavigationView.php:            $teams = $this->core->getQueries()->getTeamsByGradeableId($gradeable->getId());
site/app/views/NavigationView.php:            "href" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'team']),
site/app/views/NavigationView.php:            "(opens " . $gradeable->getSubmissionOpenDate()->format(self::DATE_FORMAT) . ")" :
site/app/views/NavigationView.php:            "(due " . $gradeable->getSubmissionDueDate()->format(self::DATE_FORMAT) . ")";
site/app/views/NavigationView.php:        $href = $this->core->buildCourseUrl(['gradeable', $gradeable->getId()]);
site/app/views/NavigationView.php:        if (!$gradeable->hasAutogradingConfig()) {
site/app/views/NavigationView.php:            $ta_graded_gradeable = $graded_gradeable->getTaGradedGradeable();
site/app/views/NavigationView.php:            $auto_graded_gradeable = $graded_gradeable->getAutoGradedGradeable();
site/app/views/NavigationView.php:                $points_percent = $auto_graded_gradeable->getNonHiddenPercent(true);
site/app/views/NavigationView.php:            if (!is_nan($points_percent) &&  $graded_gradeable->getAutoGradedGradeable()->isAutoGradingComplete() &&
site/app/views/NavigationView.php:            if (!$graded_gradeable->getAutoGradedGradeable()->isAutoGradingComplete() &&
site/app/views/NavigationView.php:            $grade_ready_for_view = $gradeable->isTaGrading() && $graded_gradeable->isTaGradingComplete() &&
site/app/views/NavigationView.php:            if ($gradeable->isTeamAssignment()) {
site/app/views/NavigationView.php:                    $this->core->getQueries()->getTeamViewedTime($graded_gradeable->getSubmitter()->getId(),$this->core->getUser()->getId()) === null) {
site/app/views/NavigationView.php:                if ($grade_ready_for_view && $ta_graded_gradeable->getUserViewedDate() === null) {
site/app/views/NavigationView.php:            if ($graded_gradeable->getAutoGradedGradeable()->isAutoGradingComplete() &&
site/app/views/NavigationView.php:                if ($gradeable->isTaGrading()) {
site/app/views/NavigationView.php:                    if (!$graded_gradeable->isTaGradingComplete()) {
site/app/views/NavigationView.php:            if ($graded_gradeable->getAutoGradedGradeable()->isAutoGradingComplete() &&
site/app/views/NavigationView.php:                    !$gradeable->getAutogradingConfig()->anyPoints() ||
site/app/views/NavigationView.php:                    $gradeable->getAutogradingConfig()->getTotalNonHiddenNonExtraCredit() != 0 && $points_percent >= 0.5
site/app/views/NavigationView.php:            if ($graded_gradeable->getAutoGradedGradeable()->isAutoGradingComplete() &&
site/app/views/NavigationView.php:            if (!$gradeable->hasDueDate()) {
site/app/views/NavigationView.php:            if (!$gradeable->isStudentSubmit() && $this->core->getUser()->accessFullGrading()) {
site/app/views/NavigationView.php:            } else if ($gradeable->isStudentSubmit() && !$gradeable->hasDueDate() && $list_section != GradeableList::OPEN) {
site/app/views/NavigationView.php:            } else if ($graded_gradeable->getAutoGradedGradeable()->isAutoGradingComplete() && $list_section == GradeableList::OPEN) {
site/app/views/NavigationView.php:            } else if ($graded_gradeable->getAutoGradedGradeable()->isAutoGradingComplete() && $list_section == GradeableList::CLOSED) {
site/app/views/NavigationView.php:                if ($gradeable->isLateSubmissionAllowed()) {
site/app/views/NavigationView.php:            } else if (!$graded_gradeable->getAutoGradedGradeable()->hasSubmission() && !$gradeable->isLateSubmissionAllowed() && $list_section == GradeableList::CLOSED) {
site/app/views/NavigationView.php:            } else if (!$graded_gradeable->getAutoGradedGradeable()->isAutoGradingComplete() && ($list_section == GradeableList::GRADED || $list_section == GradeableList::GRADING)) {
site/app/views/NavigationView.php:                if ($gradeable->isStudentSubmit()) {
site/app/views/NavigationView.php:            } else if ($gradeable->isTaGrading() && !$graded_gradeable->isTaGradingComplete() && $list_section == GradeableList::GRADED) {
site/app/views/NavigationView.php:            if ($gradeable->isTeamAssignment()) {
site/app/views/NavigationView.php:        if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/views/NavigationView.php:            $href = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'status']);
site/app/views/NavigationView.php:        } else if ($gradeable->getType() === GradeableType::CHECKPOINTS || $gradeable->getType() === GradeableType::NUMERIC_TEXT) {
site/app/views/NavigationView.php:            $href = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading']) . '?view=' . $view;
site/app/views/NavigationView.php:        if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/views/NavigationView.php:            if (!$gradeable->hasAutogradingConfig()) {
site/app/views/NavigationView.php:            if ($gradeable->anyActiveRegradeRequests()) {
site/app/views/NavigationView.php:            $grades_due = $gradeable->getGradeDueDate();
site/app/views/NavigationView.php:            $grades_released = $gradeable->getGradeReleasedDate();
site/app/views/NavigationView.php:                $date_text = '(grades due ' . $gradeable->getGradeDueDate()->format(self::DATE_FORMAT) . ')';
site/app/views/NavigationView.php:            if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE) {
site/app/views/NavigationView.php:                if ($gradeable->isTaGrading()) {
site/app/views/NavigationView.php:                    $TA_percent = $gradeable->getGradingProgress($this->core->getUser());
site/app/views/NavigationView.php:            if ($gradeable->getType() === GradeableType::ELECTRONIC_FILE && !$gradeable->isTaGrading()) {
site/app/views/NavigationView.php:                $date_text = '(grading starts ' . $gradeable->getGradeStartDate()->format(self::DATE_FORMAT) . ")";
site/app/views/NavigationView.php:            "href" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'update']),
site/app/views/NavigationView.php:            "aria_label" => "edit gradeable {$gradeable->getTitle()}"
site/app/views/NavigationView.php:                $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'delete'])
site/app/views/NavigationView.php:                . "', '{$gradeable->getTitle()}');",
site/app/views/NavigationView.php:            "aria_label" => "Delete {$gradeable->getTitle()}"
site/app/views/NavigationView.php:                "href" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'quick_link']) . '?'
site/app/views/NavigationView.php:                "href" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'quick_link']) . '?'
site/app/views/NavigationView.php:            if ($gradeable->getType() == GradeableType::ELECTRONIC_FILE) {
site/app/views/NavigationView.php:                    "href" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'quick_link']) . '?'
site/app/views/NavigationView.php:                    "href" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'quick_link']) . '?'
site/app/views/NavigationView.php:                "href" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'quick_link']) . '?'
site/app/views/NavigationView.php:            $url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'quick_link']) . '?'
site/app/views/NavigationView.php:                "onclick" => "displayCloseSubmissionsWarning(\"".$url."\",\"".$gradeable->getTitle()."\");",
site/app/views/grading/ElectronicGraderView.php:        if($gradeable->isPeerGrading() && $this->core->getUser()->getGroup() == User::GROUP_STUDENT) {
site/app/views/grading/ElectronicGraderView.php:            if ($gradeable->isTeamAssignment()) {
site/app/views/grading/ElectronicGraderView.php:            if ($gradeable->isTeamAssignment()) {
site/app/views/grading/ElectronicGraderView.php:            $num_components = count($gradeable->getNonPeerComponents());
site/app/views/grading/ElectronicGraderView.php:                $num_components = count($gradeable->getPeerComponents()) * $gradeable->getPeerGradeSet();
site/app/views/grading/ElectronicGraderView.php:            if($gradeable->isTeamAssignment()){
site/app/views/grading/ElectronicGraderView.php:                $peer_count = count($gradeable->getPeerComponents());
site/app/views/grading/ElectronicGraderView.php:                if ($gradeable->isTaGradeReleased()) {
site/app/views/grading/ElectronicGraderView.php:                    $overall_total = $overall_average->getMaxValue() + $gradeable->getAutogradingConfig()->getTotalNonExtraCredit();
site/app/views/grading/ElectronicGraderView.php:                    if ($gradeable->getAutogradingConfig()->getTotalNonExtraCredit() !== 0 && $autograded_average->getCount() !== 0) {
site/app/views/grading/ElectronicGraderView.php:                        $autograded_percentage = round($autograded_average->getAverageScore() / $gradeable->getAutogradingConfig()->getTotalNonExtraCredit() * 100);
site/app/views/grading/ElectronicGraderView.php:            if ($gradeable->isTeamAssignment()) {
site/app/views/grading/ElectronicGraderView.php:        $details_url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'details']);
site/app/views/grading/ElectronicGraderView.php:            "gradeable_id" => $gradeable->getId(),
site/app/views/grading/ElectronicGraderView.php:            "gradeable_title" => $gradeable->getTitle(),
site/app/views/grading/ElectronicGraderView.php:            "team_assignment" => $gradeable->isTeamAssignment(),
site/app/views/grading/ElectronicGraderView.php:            "ta_grades_released" => $gradeable->isTaGradeReleased(),
site/app/views/grading/ElectronicGraderView.php:            "rotating_sections_error" => (!$gradeable->isGradeByRegistration()) and $no_rotating_sections
site/app/views/grading/ElectronicGraderView.php:            "autograding_non_extra_credit" => $gradeable->getAutogradingConfig()->getTotalNonExtraCredit(),
site/app/views/grading/ElectronicGraderView.php:            "download_zip_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'download_zip']),
site/app/views/grading/ElectronicGraderView.php:            "bulk_stats_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'bulk_stats']),
site/app/views/grading/ElectronicGraderView.php:            "grade_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'grade'])
site/app/views/grading/ElectronicGraderView.php:        if ($gradeable->isPeerGrading() && $this->core->getUser()->getGroup() == User::GROUP_STUDENT) {
site/app/views/grading/ElectronicGraderView.php:            if ($gradeable->getAutogradingConfig()->getTotalNonHiddenNonExtraCredit() !== 0) {
site/app/views/grading/ElectronicGraderView.php:            if ($gradeable->isTeamAssignment()) {
site/app/views/grading/ElectronicGraderView.php:            if ($gradeable->getAutogradingConfig()->getTotalNonExtraCredit() !== 0) {
site/app/views/grading/ElectronicGraderView.php:                if($gradeable->isTaGrading()) {
site/app/views/grading/ElectronicGraderView.php:                if ($gradeable->isTaGradeReleased()) {
site/app/views/grading/ElectronicGraderView.php:                if($gradeable->isTaGrading()) {
site/app/views/grading/ElectronicGraderView.php:                if ($gradeable->isTaGradeReleased()) {
site/app/views/grading/ElectronicGraderView.php:            } else if ($gradeable->isGradeByRegistration()) {
site/app/views/grading/ElectronicGraderView.php:                    if ($user->getGroup() <= $gradeable->getMinGradingGroup()) {
site/app/views/grading/ElectronicGraderView.php:            if ($gradeable->isTeamAssignment()) {
site/app/views/grading/ElectronicGraderView.php:                $info["team_edit_onclick"] = "adminTeamForm(false, '{$row->getSubmitter()->getId()}', '{$reg_section}', '{$rot_section}', {$user_assignment_setting_json}, {$members}, {$pending_members},{$gradeable->getTeamSizeMax()});";
site/app/views/grading/ElectronicGraderView.php:            foreach ($gradeable->getComponents() as $component) {
site/app/views/grading/ElectronicGraderView.php:            } else if ($gradeable->isGradeByRegistration()) {
site/app/views/grading/ElectronicGraderView.php:            $info['new_team_onclick'] = "adminTeamForm(true, '{$teamless_user->getId()}', '{$reg_section}', '{$rot_section}', [], [], [],{$gradeable->getTeamSizeMax()});";
site/app/views/grading/ElectronicGraderView.php:                "team_edit_onclick" => "adminTeamForm(false, '{$team->getId()}', '{$reg_section}', '{$rot_section}', {$user_assignment_setting_json}, [], [],{$gradeable->getTeamSizeMax()});"
site/app/views/grading/ElectronicGraderView.php:        $team_gradeable_view_history = $gradeable->isTeamAssignment() ? $this->core->getQueries()->getAllTeamViewedTimesForGradeable($gradeable) : array();
site/app/views/grading/ElectronicGraderView.php:        $details_base_url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'details']);
site/app/views/grading/ElectronicGraderView.php:            "export_teams_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'teams', 'export']),
site/app/views/grading/ElectronicGraderView.php:            "randomize_team_rotating_sections_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'teams', 'randomize_rotating']),
site/app/views/grading/ElectronicGraderView.php:            "grade_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'grade']),
site/app/views/grading/ElectronicGraderView.php:            "gradeable_id" => $gradeable->getId(),
site/app/views/grading/ElectronicGraderView.php:            "team_submit_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'teams', 'new'])
site/app/views/grading/ElectronicGraderView.php:            "gradeable_id" => $gradeable->getId(),
site/app/views/grading/ElectronicGraderView.php:            "team_import_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'teams', 'import'])
site/app/views/grading/ElectronicGraderView.php:            "gradeable_id" => $gradeable->getId(),
site/app/views/grading/ElectronicGraderView.php:            "randomize_team_rotating_sections_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'teams', 'randomize_rotating'])
site/app/views/grading/ElectronicGraderView.php:        if($this->core->getUser()->getGroup()==User::GROUP_STUDENT && $gradeable->isPeerGrading()) {
site/app/views/grading/ElectronicGraderView.php:        $display_version_instance = $graded_gradeable->getAutoGradedGradeable()->getAutoGradedVersionInstance($display_version);
site/app/views/grading/ElectronicGraderView.php:        if($graded_gradeable->getGradeable()->isDiscussionBased()) {
site/app/views/grading/ElectronicGraderView.php:            $return .= $this->core->getOutput()->renderTemplate(array('grading', 'ElectronicGrader'), 'renderDiscussionForum', json_decode($graded_gradeable->getGradeable()->getDiscussionThreadId(), true), $graded_gradeable->getSubmitter()->getId());
site/app/views/grading/ElectronicGraderView.php:        if ($graded_gradeable->hasOverriddenGrades()) {
site/app/views/grading/ElectronicGraderView.php:        else if ($graded_gradeable->getAutoGradedGradeable()->getActiveVersion() === 0) {
site/app/views/grading/ElectronicGraderView.php:            if ($graded_gradeable->getAutoGradedGradeable()->hasSubmission()) {
site/app/views/grading/ElectronicGraderView.php:        $home_url = $this->core->buildCourseUrl(['gradeable', $graded_gradeable->getGradeableId(), 'grading', 'details']) . '?' . http_build_query(['sort' => $sort, 'direction' => $direction, 'view' => (count($this->core->getUser()->getGradingRegistrationSections()) == 0) ? 'all' : null ]);
site/app/views/grading/ElectronicGraderView.php:        $prev_student_url = $this->core->buildCourseUrl(['gradeable', $graded_gradeable->getGradeableId(), 'grading', 'grade']) . '?' . http_build_query(['sort' => $sort, 'direction' => $direction, 'from' => $from, 'to' => 'prev', 'to_ungraded' => 'false' ]);
site/app/views/grading/ElectronicGraderView.php:        $next_student_url = $this->core->buildCourseUrl(['gradeable', $graded_gradeable->getGradeableId(), 'grading', 'grade']) . '?' . http_build_query(['sort' => $sort, 'direction' => $direction, 'from' => $from, 'to' => 'next', 'to_ungraded' => 'false' ]);
site/app/views/grading/ElectronicGraderView.php:        $prev_ungraded_student_url = $this->core->buildCourseUrl(['gradeable', $graded_gradeable->getGradeableId(), 'grading', 'grade']) . '?' . http_build_query(['sort' => $sort, 'direction' => $direction, 'from' => $from, 'to' => 'prev', 'to_ungraded' => 'true']);
site/app/views/grading/ElectronicGraderView.php:        $next_ungraded_student_url =  $this->core->buildCourseUrl(['gradeable', $graded_gradeable->getGradeableId(), 'grading', 'grade']) . '?' . http_build_query(['sort' => $sort, 'direction' => $direction, 'from' => $from, 'to' => 'next', 'to_ungraded' => 'true']);
site/app/views/grading/ElectronicGraderView.php:            'grade_inquiry_pending' => $graded_gradeable->hasActiveRegradeRequest(),
site/app/views/grading/ElectronicGraderView.php:            'discussion_based' => $graded_gradeable->getGradeable()->isDiscussionBased()
site/app/views/grading/ElectronicGraderView.php:        $display_version_instance = $graded_gradeable->getAutoGradedGradeable()->getAutoGradedVersionInstance($display_version);
site/app/views/grading/ElectronicGraderView.php:        $isVcs = $graded_gradeable->getGradeable()->isVcs();
site/app/views/grading/ElectronicGraderView.php:            "gradeable_id" => $graded_gradeable->getGradeableId(),
site/app/views/grading/ElectronicGraderView.php:            "submitter_id" => $graded_gradeable->getSubmitter()->getId(),
site/app/views/grading/ElectronicGraderView.php:        $gradeable = $graded_gradeable->getGradeable();
site/app/views/grading/ElectronicGraderView.php:        $version_change_url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'grade']) . '?'
site/app/views/grading/ElectronicGraderView.php:            . http_build_query(['who_id' => $graded_gradeable->getSubmitter()->getId()]) . '&gradeable_version=';
site/app/views/grading/ElectronicGraderView.php:        if ($gradeable->isTeamAssignment()) {
site/app/views/grading/ElectronicGraderView.php:            foreach ($graded_gradeable->getSubmitter()->getTeam()->getMemberUsers() as $team_member) {
site/app/views/grading/ElectronicGraderView.php:                $tables[] = LateDaysTableController::renderLateTable($this->core, $team_member, $gradeable->getId());
site/app/views/grading/ElectronicGraderView.php:            $tables[] = LateDaysTableController::renderLateTable($this->core, $graded_gradeable->getSubmitter()->getUser(), $gradeable->getId());
site/app/views/grading/ElectronicGraderView.php:                'days_late' => $gradeable->isStudentSubmit() && $gradeable->hasDueDate() ? $version->getDaysLate() : 0
site/app/views/grading/ElectronicGraderView.php:        }, $graded_gradeable->getAutoGradedGradeable()->getAutoGradedVersions());
site/app/views/grading/ElectronicGraderView.php:        $submitter_id = $graded_gradeable->getSubmitter()->getId();
site/app/views/grading/ElectronicGraderView.php:        $active_version = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/views/grading/ElectronicGraderView.php:            "gradeable_id" => $gradeable->getId(),
site/app/views/grading/ElectronicGraderView.php:            "submitter" => $graded_gradeable->getSubmitter(),
site/app/views/grading/ElectronicGraderView.php:            "team_assignment" => $gradeable->isTeamAssignment(),
site/app/views/grading/ElectronicGraderView.php:            "highest_version" => $graded_gradeable->getAutoGradedGradeable()->getHighestVersion(),
site/app/views/grading/ElectronicGraderView.php:            'total_points' => $gradeable->getAutogradingConfig()->getTotalNonHiddenNonExtraCredit(),
site/app/views/grading/ElectronicGraderView.php:            "update_version_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'version', $new_version])
site/app/views/grading/ElectronicGraderView.php:        $gradeable = $graded_gradeable->getGradeable();
site/app/views/grading/ElectronicGraderView.php:        $grading_disabled = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion() == 0
site/app/views/grading/ElectronicGraderView.php:            || $display_version != $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/views/grading/ElectronicGraderView.php:        $version_conflict = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion() !== $display_version;
site/app/views/grading/ElectronicGraderView.php:        $has_active_version = $graded_gradeable->getAutoGradedGradeable()->hasActiveVersion();
site/app/views/grading/ElectronicGraderView.php:        $has_submission = $graded_gradeable->getAutoGradedGradeable()->hasSubmission();
site/app/views/grading/ElectronicGraderView.php:        $has_overridden_grades = $graded_gradeable->hasOverriddenGrades();
site/app/views/grading/ElectronicGraderView.php:            "gradeable_id" => $gradeable->getId(),
site/app/views/grading/ElectronicGraderView.php:            "is_ta_grading" => $gradeable->isTaGrading(),
site/app/views/grading/ElectronicGraderView.php:            "anon_id" => $graded_gradeable->getSubmitter()->getAnonId(),
site/app/views/grading/SimpleGraderView.php:        $action = ($gradeable->getType() === 1) ? 'lab' : 'numeric';
site/app/views/grading/SimpleGraderView.php:        foreach ($gradeable->getComponents() as $component) {
site/app/views/grading/SimpleGraderView.php:            if ($gradeable->isGradeByRegistration()) {
site/app/views/grading/SimpleGraderView.php:                $section = $graded_gradeable->getSubmitter()->getUser()->getRegistrationSection();
site/app/views/grading/SimpleGraderView.php:                $section = $graded_gradeable->getSubmitter()->getUser()->getRotatingSection();
site/app/views/grading/SimpleGraderView.php:            if ($graded_gradeable->getSubmitter()->getUser()->getRegistrationSection() != "") {
site/app/views/grading/SimpleGraderView.php:        $this->core->getOutput()->addBreadcrumb("Grading {$gradeable->getTitle()}");
site/app/views/grading/SimpleGraderView.php:            "print_lab_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading', 'print']),
site/app/views/grading/SimpleGraderView.php:            "grading_url" => $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'grading'])
site/app/views/grading/SimpleGraderView.php:        }, $gradeable->getComponents());
site/app/views/submission/HomeworkView.php:            $version_instance = $graded_gradeable->getAutoGradedGradeable()->getAutoGradedVersions()[$display_version] ?? null;
site/app/views/submission/HomeworkView.php:            $late_days_use = max(0, $gradeable->getWouldBeDaysLate() - $graded_gradeable->getLateDayException($this->core->getUser()));
site/app/views/submission/HomeworkView.php:        $on_team = $this->core->getUser()->onTeam($gradeable->getId());
site/app/views/submission/HomeworkView.php:        } else if ($gradeable->isStudentSubmit()) {
site/app/views/submission/HomeworkView.php:            if ($gradeable->canStudentSubmit()) {
site/app/views/submission/HomeworkView.php:        $all_directories = $gradeable->getSplitPdfFiles();
site/app/views/submission/HomeworkView.php:        $auto_graded_gradeable = $graded_gradeable !== null ? $graded_gradeable->getAutoGradedGradeable() : null;
site/app/views/submission/HomeworkView.php:        $submission_count = $auto_graded_gradeable !== null ? $auto_graded_gradeable->getHighestVersion() : 0;
site/app/views/submission/HomeworkView.php:        $active_version = $auto_graded_gradeable !== null ? $auto_graded_gradeable->getActiveVersion() : 0;
site/app/views/submission/HomeworkView.php:            && $gradeable->isTaGradeReleased()
site/app/views/submission/HomeworkView.php:            && $gradeable->isTaGrading()
site/app/views/submission/HomeworkView.php:            && $graded_gradeable->isTaGradingComplete()
site/app/views/submission/HomeworkView.php:            && $gradeable->isRegradeOpen()
site/app/views/submission/HomeworkView.php:        if ($gradeable->isTaGradeReleased()
site/app/views/submission/HomeworkView.php:            && $gradeable->isTaGrading()
site/app/views/submission/HomeworkView.php:        if ($regrade_available || $graded_gradeable !== null && $graded_gradeable->hasRegradeRequest()) {
site/app/views/submission/HomeworkView.php:            $extensions = $graded_gradeable->getLateDayException($this->core->getUser());
site/app/views/submission/HomeworkView.php:            $active_version_instance = $graded_gradeable->getAutoGradedGradeable()->getActiveVersionInstance();
site/app/views/submission/HomeworkView.php:            $active_version = $graded_gradeable->getAutoGradedGradeable()->getActiveVersion();
site/app/views/submission/HomeworkView.php:        $would_be_days_late = $gradeable->getWouldBeDaysLate();
site/app/views/submission/HomeworkView.php:        $late_days_allowed = $gradeable->getLateDays();
site/app/views/submission/HomeworkView.php:        $student_page = $gradeable->isStudentPdfUpload();
site/app/views/submission/HomeworkView.php:        $inputs = $gradeable->getAutogradingConfig()->getInputs();
site/app/views/submission/HomeworkView.php:        $notebook = $gradeable->getAutogradingConfig()->getNotebook();
site/app/views/submission/HomeworkView.php:        $would_be_days_late = $gradeable->getWouldBeDaysLate();
site/app/views/submission/HomeworkView.php:            $active_version_instance = $graded_gradeable->getAutoGradedGradeable()->getActiveVersionInstance();
site/app/views/submission/HomeworkView.php:        if (!$gradeable->isVcs()) {
site/app/views/submission/HomeworkView.php:                        $gradeable->getId(),
site/app/views/submission/HomeworkView.php:                for ($i = 1; $i <= $gradeable->getAutogradingConfig()->getNumParts(); $i++) {
site/app/views/submission/HomeworkView.php:            $gradeable_path = FileUtils::joinPaths($this->core->getConfig()->getCoursePath(), "submissions", $gradeable->getId());
site/app/views/submission/HomeworkView.php:            $highest_version = $graded_gradeable->getAutoGradedGradeable()->getHighestVersion();
site/app/views/submission/HomeworkView.php:        }, $gradeable->getComponents());
site/app/views/submission/HomeworkView.php:        $highest_version = $graded_gradeable !== null ? $graded_gradeable->getAutoGradedGradeable()->getHighestVersion() : 0;
site/app/views/submission/HomeworkView.php:        $my_team = $graded_gradeable !== null ? $graded_gradeable->getSubmitter()->getTeam() : "";
site/app/views/submission/HomeworkView.php:        $my_repository = $graded_gradeable !== null ? $gradeable->getRepositoryPath($this->core->getUser(),$my_team) : "";
site/app/views/submission/HomeworkView.php:        $notebook_data = $graded_gradeable !== null ? $graded_gradeable->getUpdatedNotebook() : array();
site/app/views/submission/HomeworkView.php:        $this->core->getOutput()->addInternalCss('gradeable-notebook.css');
site/app/views/submission/HomeworkView.php:        $this->core->getOutput()->addInternalJs('gradeable-notebook.js');
site/app/views/submission/HomeworkView.php:            'gradeable_id' => $gradeable->getId(),
site/app/views/submission/HomeworkView.php:            'gradeable_name' => $gradeable->getTitle(),
site/app/views/submission/HomeworkView.php:            'formatted_due_date' => $gradeable->getSubmissionDueDate()->format($DATE_FORMAT),
site/app/views/submission/HomeworkView.php:            'part_names' => $gradeable->getAutogradingConfig()->getPartNames(),
site/app/views/submission/HomeworkView.php:            'is_vcs' => $gradeable->isVcs(),
site/app/views/submission/HomeworkView.php:            'vcs_subdirectory' => $gradeable->getVcsSubdirectory(),
site/app/views/submission/HomeworkView.php:            'vcs_host_type' => $gradeable->getVcsHostType(),
site/app/views/submission/HomeworkView.php:            'has_due_date' => $gradeable->hasDueDate(),
site/app/views/submission/HomeworkView.php:            'show_no_late_submission_warning' => !$gradeable->isLateSubmissionAllowed() && $gradeable->isSubmissionClosed(),
site/app/views/submission/HomeworkView.php:            'has_gradeable_message' => $gradeable->getAutogradingConfig()->getGradeableMessage() !== null
site/app/views/submission/HomeworkView.php:               && $gradeable->getAutogradingConfig()->getGradeableMessage() !== '',
site/app/views/submission/HomeworkView.php:            'gradeable_message' => $gradeable->getAutogradingConfig()->getGradeableMessage(),
site/app/views/submission/HomeworkView.php:            'allowed_late_days' => $gradeable->getLateDays(),
site/app/views/submission/HomeworkView.php:            'num_inputs' => $gradeable->getAutogradingConfig()->getNumInputs(),
site/app/views/submission/HomeworkView.php:            'max_submissions' => $gradeable->getAutogradingConfig()->getMaxSubmissions(),
site/app/views/submission/HomeworkView.php:            'has_overridden_grades' => $graded_gradeable ? $graded_gradeable->hasOverriddenGrades() : false,
site/app/views/submission/HomeworkView.php:        $all_directories = $gradeable->getSplitPdfFiles();
site/app/views/submission/HomeworkView.php:            'gradeable_id' => $gradeable->getId(),
site/app/views/submission/HomeworkView.php:            'team_assignment' => $gradeable->isTeamAssignment(),
site/app/views/submission/HomeworkView.php:            'max_team_size' => $gradeable->getTeamSizeMax(),
site/app/views/submission/HomeworkView.php:        $team_assignment = $graded_gradeable === null ? true : $graded_gradeable->getGradeable()->isTeamAssignment();
site/app/views/submission/HomeworkView.php:                    ? $graded_gradeable->getSubmitter()->getTeam()->getMemberList() : '';
site/app/views/submission/HomeworkView.php:        $gradeable = $graded_gradeable->getGradeable();
site/app/views/submission/HomeworkView.php:        $autograding_config = $gradeable->getAutogradingConfig();
site/app/views/submission/HomeworkView.php:        $auto_graded_gradeable = $graded_gradeable->getAutoGradedGradeable();
site/app/views/submission/HomeworkView.php:        $active_version_number = $auto_graded_gradeable->getActiveVersion();
site/app/views/submission/HomeworkView.php:                'days_late' => $gradeable->isStudentSubmit() && $gradeable->hasDueDate() ? $version->getDaysLate() : 0
site/app/views/submission/HomeworkView.php:        }, $auto_graded_gradeable->getAutoGradedVersions());
site/app/views/submission/HomeworkView.php:        $can_download = !$gradeable->isVcs();
site/app/views/submission/HomeworkView.php:            if ($graded_gradeable->hasTaGradingInfo()) {
site/app/views/submission/HomeworkView.php:                $active_same_as_graded = $graded_gradeable->getTaGradedGradeable()->getGradedVersion() === $active_version_number;
site/app/views/submission/HomeworkView.php:        $cancel_url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'version' ,'0']);
site/app/views/submission/HomeworkView.php:        $change_version_url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), 'version', $display_version]);
site/app/views/submission/HomeworkView.php:        $view_version_url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId()]) . '/';
site/app/views/submission/HomeworkView.php:        $check_refresh_submission_url = $this->core->buildCourseUrl(['gradeable', $gradeable->getId(), $display_version, 'check_refresh']);
site/app/views/submission/HomeworkView.php:            'gradeable_id' => $gradeable->getId(),
site/app/views/submission/HomeworkView.php:            'hide_submitted_files' => $gradeable->getAutogradingConfig()->getHideSubmittedFiles(),
site/app/views/submission/HomeworkView.php:            'hide_version_and_test_details' => $gradeable->getAutogradingConfig()->getHideVersionAndTestDetails(),
site/app/views/submission/HomeworkView.php:            'has_manual_grading' => $gradeable->isTaGrading(),
site/app/views/submission/HomeworkView.php:            'team_assignment' => $gradeable->isTeamAssignment(),
site/app/views/submission/HomeworkView.php:            'team_members' => $gradeable->isTeamAssignment() ? $graded_gradeable->getSubmitter()->getTeam()->getMemberList() : [],
site/app/views/submission/HomeworkView.php:            'allowed_late_days' => $gradeable->getLateDays(),
site/app/views/submission/HomeworkView.php:            'ta_grades_released' => $gradeable->isTaGradeReleased(),
site/app/views/submission/HomeworkView.php:            'is_vcs' => $gradeable->isVcs(),
site/app/views/submission/HomeworkView.php:            'can_change_submissions' => $this->core->getUser()->accessGrading() || $gradeable->isStudentSubmit(),
site/app/views/submission/HomeworkView.php:            'can_see_all_versions' => $this->core->getUser()->accessGrading() || $gradeable->isStudentSubmit(),
site/app/views/submission/HomeworkView.php:        if ($graded_gradeable->isTaGradingComplete()) {
site/app/views/submission/HomeworkView.php:                $graded_gradeable->getTaGradedGradeable(), $regrade_available, $graded_gradeable->getAutoGradedGradeable()->getActiveVersionInstance()->getFiles());
site/app/views/submission/HomeworkView.php:        $grade_inquiry_per_component_allowed = $graded_gradeable->getGradeable()->isGradeInquiryPerComponentAllowed();
site/app/views/submission/HomeworkView.php:            $graded_gradeable->getGradeable()->getId(),
site/app/views/submission/HomeworkView.php:            $graded_gradeable->getGradeable()->getId(),
site/app/views/submission/HomeworkView.php:            $graded_gradeable->getGradeable()->getId(),
site/app/views/submission/HomeworkView.php:        $grade_inquiries = $graded_gradeable->getRegradeRequests();
site/app/views/submission/HomeworkView.php:        $gradeable_components = $graded_gradeable->getGradeable()->getComponents();
site/app/views/submission/HomeworkView.php:                    $component = $graded_gradeable->getGradeable()->getComponent($gc_id);
site/app/views/submission/HomeworkView.php:            'has_submission' => $graded_gradeable->hasSubmission(),
site/app/views/submission/HomeworkView.php:            'submitter_id' => $graded_gradeable->getSubmitter()->getId(),
site/app/views/submission/HomeworkView.php:            'g_id' =>$graded_gradeable->getGradeable()->getId(),
site/app/views/submission/TeamView.php:        $gradeable_id = $gradeable->getId();
site/public/css/admin-gradeable.css:#gradeable-dates input[type="text"] {
site/public/css/admin-gradeable.css:#rebuild-gradeable-button {
site/public/css/configuration.css:#room-seating-gradeable-id {
site/public/css/configuration.css:    #room-seating-gradeable-id {
site/public/css/exceptionforms.css:#gradeable-select {
site/public/css/navigation.css:.gradeable-row {
site/public/css/navigation.css:.gradeable-row:nth-last-child(1) {
site/public/css/navigation.css:    .gradeable-row {
site/public/css/navigation.css:    .gradeable-row {
site/public/css/submitbox.css:#gradeable-info {
site/public/css/submitbox.css:#gradeable-info > * {
site/public/js/admin-gradeable-updates.js:        if ($('#gradeable-dates').find('input[name="' + this.name + '"]').length > 0
site/public/js/admin-gradeable-updates.js:            $('#gradeable-dates :input,.date-related').each(addDataToRequest);
site/public/js/configuration.js:        if ($("#room-seating-gradeable-id").val()) {
site/public/js/configuration.js:    $(document).on("change", "#room-seating-gradeable-id", updateEmailSeatingOption);
site/public/js/extensions.js:    var g_id = $('#gradeable-select').val();
site/public/js/server.js:    var form = $("#delete-gradeable-form");
site/public/js/server.js:    $('[name="delete-gradeable-message"]', form).html('');
site/public/js/server.js:    $('[name="delete-gradeable-message"]', form).append('<b>'+gradeable_name+'</b>');
site/public/js/ta-grading-rubric.js:    return $('#gradeable-rubric').attr('data-gradeable_id');
site/public/js/ta-grading-rubric.js:    return $('#edit-gradeable-instructor-flag').length > 0;
site/public/js/ta-grading-rubric.js:    return parseInt($('#gradeable-version-container').attr('data-gradeable_version'));
site/public/js/ta-grading-rubric.js:    let dataDOMElement = $('#gradeable-scores-id');
site/public/js/ta-grading-rubric.js: * Sets the gradeable-wide page setting
site/public/templates/grading/EditGradeable.twig:    <div id="edit-gradeable-instructor-flag" hidden></div>
site/public/templates/grading/Gradeable.twig:<div id="gradeable-rubric" class="gradeable" data-gradeable_id="{{ gradeable.id }}">
site/public/templates/grading/GradingGradeable.twig:    <span id="gradeable-scores-id"
site/tests/app/controllers/AuthenticationControllerTester.php:        $gradeable->method('isTeamAssignment')->willReturn(true);
site/tests/app/controllers/AuthenticationControllerTester.php:        $gradeable->method('isTeamAssignment')->willReturn(true);
site/tests/app/controllers/grading/SimpleGraderControllerTester.php:        $gradeable->method('getComponents')->willReturn([$component]);
site/tests/app/controllers/grading/SimpleGraderControllerTester.php:        $graded_gradeable->method('getOrCreateTaGradedGradeable')->willReturn($ta_graded_gradeable);
site/tests/app/controllers/grading/SimpleGraderControllerTester.php:        $ta_graded_gradeable->method('getOrCreateGradedComponent')->willReturn($graded_component);
site/tests/app/controllers/grading/SimpleGraderControllerTester.php:        $ta_graded_gradeable->method('setOverallComment')->willReturn(true);
site/tests/app/controllers/student/SubmissionControllerTester.php:            $gradeable->setAutogradingConfig($auto_grading_config);
site/tests/app/controllers/student/SubmissionControllerTester.php:        $auto_graded_gradeable->setAutoGradedVersions([$auto_graded_version]);
site/tests/app/controllers/student/SubmissionControllerTester.php:        $graded_gradeable->setAutoGradedGradeable($auto_graded_gradeable);
site/tests/app/controllers/student/SubmissionControllerTester.php:        $graded_gradeable->setTaGradedGradeable($ta_graded_gradeable);
site/tests/app/controllers/student/TeamControllerTester.php:        $gradeable->method('getId')->willReturn("test");
site/tests/app/controllers/student/TeamControllerTester.php:        $gradeable->method('getTitle')->willReturn("Test Gradeable");
site/tests/app/controllers/student/TeamControllerTester.php:        	$gradeable->method('isTeamAssignment')->willReturn(true);
site/tests/app/libraries/GradingQueueTester.php:        $gradeable->method('getId')->willReturn('test');
site/tests/app/libraries/GradingQueueTester.php:        $graded_gradeable->method('getGradeable')->willReturn($gradeable);
site/tests/app/libraries/GradingQueueTester.php:        $graded_gradeable->method('getSubmitter')->willReturn($submitter);
site/tests/app/models/gradeable/LateDayInfoTester.php:        $gradeable->method('getSubmissionDueDate')->willReturn(new \DateTime($due_date));
site/tests/app/models/gradeable/LateDayInfoTester.php:        $gradeable->method('getLateDays')->willReturn($late_days);
site/tests/app/models/gradeable/LateDayInfoTester.php:            $auto_graded_gradeable->method('getActiveVersionInstance')->willReturn($auto_graded_version);
site/tests/app/models/gradeable/LateDayInfoTester.php:            $auto_graded_gradeable->method('hasActiveVersion')->willReturn(true);
site/tests/app/models/gradeable/LateDayInfoTester.php:            $auto_graded_gradeable->method('getActiveVersionInstance')->willReturn(null);
site/tests/app/models/gradeable/LateDayInfoTester.php:            $auto_graded_gradeable->method('hasActiveVersion')->willReturn(false);
site/tests/app/models/gradeable/LateDayInfoTester.php:        $graded_gradeable->method('getGradeable')->willReturn($gradeable);
site/tests/app/models/gradeable/LateDayInfoTester.php:        $graded_gradeable->method('getSubmitter')->willReturn($submitter);
site/tests/app/models/gradeable/LateDayInfoTester.php:        $graded_gradeable->method('getAutoGradedGradeable')->willReturn($auto_graded_gradeable);
site/tests/app/models/gradeable/LateDayInfoTester.php:        $graded_gradeable->method('getLateDayException')->willReturn($late_day_exception);
site/tests/app/models/gradeable/LateDayInfoTester.php:        $graded_gradeable->method('getSubmitter')->willReturn($submitter);
site/tests/app/models/gradeable/LateDayInfoTester.php:        $graded_gradeable->method('getSubmitter')->willReturn($submitter);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getSubmissionDueDate')->willReturn(new \DateTime($due_date));
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getLateDays')->willReturn($late_days);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getId')->willReturn($gradeable_id);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:            $auto_graded_gradeable->method('getActiveVersionInstance')->willReturn($auto_graded_version);
site/tests/app/models/gradeable/LateDaysTester.php:            $auto_graded_gradeable->method('hasActiveVersion')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:            $auto_graded_gradeable->method('getActiveVersionInstance')->willReturn(null);
site/tests/app/models/gradeable/LateDaysTester.php:            $auto_graded_gradeable->method('hasActiveVersion')->willReturn(false);
site/tests/app/models/gradeable/LateDaysTester.php:        $graded_gradeable->method('getGradeable')->willReturn($gradeable);
site/tests/app/models/gradeable/LateDaysTester.php:        $graded_gradeable->method('getGradeableId')->willReturn($gradeable_id);
site/tests/app/models/gradeable/LateDaysTester.php:        $graded_gradeable->method('getSubmitter')->willReturn($submitter);
site/tests/app/models/gradeable/LateDaysTester.php:        $graded_gradeable->method('getAutoGradedGradeable')->willReturn($auto_graded_gradeable);
site/tests/app/models/gradeable/LateDaysTester.php:        $graded_gradeable->method('getLateDayException')->willReturn($late_day_exception);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getId')->willReturn($gradeable_id);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::CHECKPOINTS);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentSubmit')->willReturn(false);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasDueDate')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isLateSubmissionAllowed')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentSubmit')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasDueDate')->willReturn(false);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isLateSubmissionAllowed')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentSubmit')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasDueDate')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isLateSubmissionAllowed')->willReturn(false);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentSubmit')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasDueDate')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isLateSubmissionAllowed')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasAutoGradingConfig')->willReturn(false);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentSubmit')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasDueDate')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isLateSubmissionAllowed')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasAutoGradingConfig')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentView')->willReturn(false);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentSubmit')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasDueDate')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isLateSubmissionAllowed')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasAutoGradingConfig')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentView')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isTaViewOpen')->willReturn(false);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentSubmit')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasDueDate')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isLateSubmissionAllowed')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasAutoGradingConfig')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentView')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isTaViewOpen')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isSubmissionOpen')->willReturn(false);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('getType')->willReturn(\app\libraries\GradeableType::ELECTRONIC_FILE);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentSubmit')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasDueDate')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isLateSubmissionAllowed')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('hasAutoGradingConfig')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isStudentView')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isTaViewOpen')->willReturn(true);
site/tests/app/models/gradeable/LateDaysTester.php:        $gradeable->method('isSubmissionOpen')->willReturn(true);
tests/e2e/test_navigation_page_non_student.py:                         .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:                                 .find_elements_by_class_name('gradeable-row')))
tests/e2e/test_navigation_page_non_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:                         .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:                         .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:                         .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:            'gradeable-row').find_elements_by_class_name('course-button')))
tests/e2e/test_navigation_page_non_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_non_student.py:            'gradeable-row').find_elements_by_class_name('course-button')))
tests/e2e/test_navigation_page_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_student.py:                                .find_elements_by_class_name("gradeable-row")))
tests/e2e/test_navigation_page_student.py:            'gradeable-row').find_elements_by_class_name('course-button')))
